{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(shiny)\nlibrary(gdata)\nlibrary(sand)\nlibrary(coda)\nlibrary(reshape)\nlibrary(\"entropy\")\nlibrary(\"yaml\")\nlibrary(\"RJDBC\")\nlibrary(\"ggplot2\")\nlibrary(\"PerformanceAnalytics\")\nlibrary(gridExtra)\nmyDir<-\"C:/MiltonNotebook/Mestrado Estatistica/2014/9-Dissertacao/ImplementacoesABC_Defesa\"\nconfigFile <- paste(myDir, \"config.yml\", sep=\"/\");\nconfig <- yaml.load_file(configFile)\nsetwd(config$diretorios$DadosDir)\n\nfu <- function (u, theta1, theta2) theta1*u + theta2*u^3 -u/2*log(u) - (1 - u )/2*log(1 - u)\n\nretornaDadosResutadoPorV <- function (dadosResultado, pNumVertice, pIntervaloConfKL, pIntervaloConfKS, pIntervaloConfChi2) {\n  dadosResultadoPorV <- subset(dadosResultado, NU_VERTICES == pNumVertice)\n#  dadosResultadoPorV  <- dadosResultadoPorV[,-c(1,2,4,5,7,9,10,16,17,18)]\n  dadosResultadoPorV  <- dadosResultadoPorV[,-c(1,2,4,5,7,9,10,14,16,17,18)]\n#  names(dadosResultadoPorV)  <- c(\"Modelo\",\"Media posteriori\",\"Vertice\",\"KL\",\"KS\",\"KS-pvalue\",\"ChiQ\",\"ESS\")\n  names(dadosResultadoPorV)  <- c(\"Modelo\",\"Media posteriori\",\"Vertice\",\"KL\",\"KS\",\"KS-pvalue\",\"ESS\")\n#  dadosResultadoPorV <- dadosResultadoPorV[c(\"Vertice\",\"Modelo\",\"Media posteriori\",\"KL\",\"KS\",\"KS-pvalue\",\"ChiQ\",\"ESS\")]\n  dadosResultadoPorV <- dadosResultadoPorV[c(\"Vertice\",\"Modelo\",\"Media posteriori\",\"KL\",\"KS\",\"KS-pvalue\",\"ESS\")]\n  intervaloConfKLPorV <- subset(pIntervaloConfKL, NU_VERTICES == pNumVertice)   \n  intervaloConfKSPorV <- subset(pIntervaloConfKS, NU_VERTICES == pNumVertice)   \n  intervaloConfChiPorV <- subset(pIntervaloConfChi2, NU_VERTICES == pNumVertice)   \n  intervaloConfKLPorV <- intervaloConfKLPorV[,-1]\n  intervaloConfKSPorV <- intervaloConfKSPorV[,-1]\n#  intervaloConfChiPorV <- intervaloConfChiPorV[,-1]\n  intervaloConfPValuePorV <- as.data.frame(t(c(0.05,0.1)))\n  names(intervaloConfPValuePorV) <- c(\"PV95\",\"PV99\")\n#  dadosResultadoPorV <- cbind(dadosResultadoPorV,intervaloConfKLPorV,intervaloConfKSPorV,intervaloConfChiPorV,intervaloConfPValuePorV)\n  dadosResultadoPorV <- cbind(dadosResultadoPorV,intervaloConfKLPorV,intervaloConfKSPorV,intervaloConfPValuePorV)\n  attach(dadosResultadoPorV)\n  dadosResultadoPorV <- dadosResultadoPorV[order(Modelo),]\n  return(dadosResultadoPorV)\n}\n#dadosResultado50   <- retornaDadosResutadoPorV(dadosResultado,50,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\n\n# Define server logic for random distribution application\nshinyServer(function(input, output, session) {\n  \n  # Reactive expression to generate the requested distribution.\n  # This is called whenever the inputs change. The output\n  # functions defined below then all use the value computed from\n  # this expression\n  data <- reactive({\n    modelo <- switch(input$modelo,\n                   Delmoral = Delmoral,\n                   Beaumont = Beaumont,\n                   Lenormand = Lenormand,\n                   Drovandi = Drovandi,\n                   Rejeicao = Rejeicao,\n                   Marjoram = Marjoram\n                   )\n    \n    nVertices <- switch(input$selecionaVertices)\n    \n    nCenario  <- switch(input$selecionaCenario)\n\n  })\n  \n  # Generate a plot of the data. Also uses the inputs to build\n  # the plot label. Note that the dependencies on both the inputs\n  # and the data reactive expression are both tracked, and\n  # all expressions are called in the sequence implied by the\n  # dependency graph\n  output$BergmG <- renderPlot({\n    modelo <- input$modelo\n    nVertices <- input$selecionaVertices\n    nCenario <- input$selecionaCenario\n    if (nCenario == 802 || nCenario == 902) {\n      if (nCenario == 802) {\n        load(\"amostraTheta1_Bergm50_8_02.RData\")\n        load(\"amostraTheta2_Bergm50_8_02.RData\")\n        amostra1Bergm <- amostraTheta1\n        amostra2Bergm <- amostraTheta2\n        thetasG <- c(0.8,0.02)\n      }\n      if (nCenario == 902) {\n        load(\"amostraTheta1_Bergm50_9_02.RData\")\n        load(\"amostraTheta2_Bergm50_9_02.RData\")\n        amostra1Bergm <- amostraTheta1\n        amostra2Bergm <- amostraTheta2\n        thetasG <- c(0.9,0.02)\n      }\n      guEstrela <- optimize(f = fu, c(0,1), maximum = TRUE, theta1 = thetasG[1], theta2 = thetasG[2] )\n      \n      par(mfrow=c(2,4))\n      pminXParam <- min(amostra1Bergm)\n      pmaxXParam <- max(amostra1Bergm)\n      \n      lag <- 1\n      T1 <- NROW(amostra1Bergm)\n      theta1 <- amostra1Bergm\n      ind <- seq(lag,T1,by=lag)\n      theta1 <- theta1[ind]\n      T1 <- length(ind)\n      estTheta1 =cumsum(theta1)/(1:T1)\n      esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T1)\n      \n      T2 <- NROW(amostra2Bergm)\n      theta2 <- amostra2Bergm\n      ind <- seq(lag,T2,by=lag)\n      theta2 <- theta2[ind]\n      T2 <- length(ind)\n      estTheta2 =cumsum(theta2)/(1:T2)\n      esterrTheta2=sqrt(cumsum((theta2-estTheta2)^2))/(1:T2)\n      \n      mediaAPosteriori1 <- mean(theta1)\n      mediaAPosteriori2 <- mean(theta2)\n      guEstrelaHat <- optimize(f = fu, c(0,1), maximum = TRUE, theta1 = mediaAPosteriori1, theta2 = mediaAPosteriori2 )\n      \n      amostraMCMC <- mcmc(theta1)\n      \n      denAmostraTheta <- density(amostra1Bergm)\n      maxYParam <- max(denAmostraTheta$y)\n      densplot(amostraMCMC,type=\"l\", lwd=2,\n               xlab=\"Densidade\",\n               xlim=c(pminXParam,pmaxXParam),\n               ylim=c(0,maxYParam),\n               main=paste(\"Theta1=\",thetasG[1],\"\\n p=\",round(guEstrela$maximum,3),\" pHat=\",round(guEstrelaHat$maximum,3),\"\\n MÃ©dia posteriori =\",round(mediaAPosteriori1,3),sep=\"\")\n      )\n      \n      abline(v=mediaAPosteriori1,col=\"red\")\n      pmaxLag <- 100\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"ConvergÃªncia\"))\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃ§Ã£oo\",sep=\"\"))\n      \n      plot(estTheta1, xlab=\"IteraÃ§Ãµes\",main=\"MÃ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n             + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T1],esterrTheta1[T1]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"blue\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"blue\",lwd=2)      \n      \n      lag <- 1\n      pminXParam <- min(amostra2Bergm)\n      pmaxXParam <- max(amostra2Bergm)\n      \n      amostraMCMC <- mcmc(theta2)\n      mediaAPosteriori2 <- mean(theta2)\n      \n      denAmostraTheta <- density(amostra2Bergm)\n      maxYParam <- max(denAmostraTheta$y)\n      densplot(amostraMCMC,type=\"l\", lwd=2,\n               xlab=\"Densidade\",\n               xlim=c(pminXParam,pmaxXParam),\n               ylim=c(0,maxYParam),\n               main=paste(\"Theta2=\",thetasG[2],\"\\n p=\",round(guEstrela$maximum,3),\" pHat=\",round(guEstrelaHat$maximum,3),\"\\n MÃ©dia posteriori =\",round(mediaAPosteriori2,3),sep=\"\")\n      )\n      \n      abline(v=mediaAPosteriori2,col=\"red\")\n      pmaxLag <- 100\n      \n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"ConvergÃªncia\"))\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃ§Ã£oo\",sep=\"\"))\n      \n      plot(estTheta2, xlab=\"IteraÃ§Ãµes\",main=\"MÃ©dia e intervalo de erro : Theta 2\",type=\"l\",lwd=\n             + 2,ylim=mean(theta2)+20*c(-esterrTheta2[T2],esterrTheta2[T2]),ylab=\"\")\n      lines(estTheta2 +2*esterrTheta2,col=\"green\",lwd=2)\n      lines(estTheta2 -2*esterrTheta2,col=\"green\",lwd=2)      \n    } else {\n        textplot(paste(\"NÃƒO FORAM GERADOS DADOS PARA ESSE CENÃRIO\"),cex=1,col.main = \"blue\",halign = \"left\",valign=\"top\")\n    }\n  })\n\n  output$Lenormand <- renderPlot({\n    modelos <- input$modelos\n    modelo <- \"Lenormand\"\n    nVertices <- input$selecionaVertices\n    nCenario <- input$selecionaCenario\n    if (nCenario == 802) {\n        load(\"amostraTheta1_Lenorman50_O_8_02.RData\")\n        load(\"amostraTheta2_Lenorman50_O_8_02.RData\")\n        amostra1OLenormand <- amostraTheta1\n        amostra2OLenormand <- amostraTheta2\n        thetasG <- c(0.8,0.02)\n    }\n    if (nCenario == 902) {\n        load(\"amostraTheta1_Lenorman50_O_9_02.RData\")\n        load(\"amostraTheta2_Lenorman50_O_9_02.RData\")\n        amostra1OLenormand <- amostraTheta1\n        amostra2OLenormand <- amostraTheta2\n        thetasG <- c(0.9,0.02)\n    }\n    if (nCenario == 22) {\n        load(\"amostraTheta1_Lenorman50_O_2_2.RData\")\n        load(\"amostraTheta2_Lenorman50_O_2_2.RData\")\n        amostra1OLenormand <- amostraTheta1\n        amostra2OLenormand <- amostraTheta2\n        thetasG <- c(0.2,0.2)\n    }\n    if (nCenario == 535) {\n        load(\"amostraTheta1_Lenorman50_O_5_35.RData\")\n        load(\"amostraTheta2_Lenorman50_O_5_35.RData\")\n        amostra1OLenormand <- amostraTheta1\n        amostra2OLenormand <- amostraTheta2\n        thetasG <- c(0.5,0.35)\n    }\n    if (nCenario == 61) {\n        load(\"amostraTheta1_Lenorman50_O_6_1.RData\")\n        load(\"amostraTheta2_Lenorman50_O_6_1.RData\")\n        amostra1OLenormand <- amostraTheta1\n        amostra2OLenormand <- amostraTheta2\n        thetasG <- c(0.6,0.1)\n    }\n    if (nCenario == 73) {\n        load(\"amostraTheta1_Lenorman50_O_7_3.RData\")\n        load(\"amostraTheta2_Lenorman50_O_7_3.RData\")\n        amostra1OLenormand <- amostraTheta1\n        amostra2OLenormand <- amostraTheta2\n        thetasG <- c(0.7,0.3)\n    }\n    guEstrela <- optimize(f = fu, c(0,1), maximum = TRUE, theta1 = thetasG[1], theta2 = thetasG[2] )\n\n    par(mfrow=c(2,4))\n    pminXParam <- min(amostra1OLenormand)\n    pmaxXParam <- max(amostra1OLenormand)\n\n    lag <- 1\n    T1 <- NROW(amostra1OLenormand)\n    theta1 <- amostra1OLenormand\n    ind <- seq(lag,T1,by=lag)\n    theta1 <- theta1[ind]\n    T1 <- length(ind)\n    estTheta1 =cumsum(theta1)/(1:T1)\n    esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T1)\n\n    T2 <- NROW(amostra2OLenormand)\n    theta2 <- amostra2OLenormand\n    ind <- seq(lag,T2,by=lag)\n    theta2 <- theta2[ind]\n    T2 <- length(ind)\n    estTheta2 =cumsum(theta2)/(1:T2)\n    esterrTheta2=sqrt(cumsum((theta2-estTheta2)^2))/(1:T2)\n\n    mediaAPosteriori1 <- mean(theta1)\n    mediaAPosteriori2 <- mean(theta2)\n    guEstrelaHat <- optimize(f = fu, c(0,1), maximum = TRUE, theta1 = mediaAPosteriori1, theta2 = mediaAPosteriori2 )\n\n    amostraMCMC <- mcmc(theta1)\n    denAmostraTheta <- density(amostra1OLenormand)\n    maxYParam <- max(denAmostraTheta$y)\n    \n    densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Densidade\",\n                                      xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(\"Theta1=\",thetasG[1],\"\\n p=\",round(guEstrela$maximum,3),\" pHat=\",round(guEstrelaHat$maximum,3),\"\\n MÃ©dia posteriori =\",round(mediaAPosteriori1,3),sep=\"\")\n                                      )\n      abline(v=mediaAPosteriori1,col=\"red\")\n      pmaxLag <- 100\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"ConvergÃªncia\"))\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃ§Ã£oo\",sep=\"\"))\n\n      plot(estTheta1, xlab=\"IteraÃ§Ãµes\",main=\"MÃ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n      + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T1],esterrTheta1[T1]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"blue\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"blue\",lwd=2)      \n\n    pminXParam <- min(amostra2OLenormand)\n    pmaxXParam <- max(amostra2OLenormand)\n\n    amostraMCMC <- mcmc(theta2)\n\n    denAmostraTheta <- density(amostra2OLenormand)\n    maxYParam <- max(denAmostraTheta$y)\n    \n    densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Densidade\",\n                                      xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(\"Theta2=\",thetasG[2],\"\\n p=\",round(guEstrela$maximum,3),\" pHat=\",round(guEstrelaHat$maximum,3),\"\\n MÃ©dia posteriori =\",round(mediaAPosteriori2,3),sep=\"\")\n                                      )\n      abline(v=mediaAPosteriori2,col=\"red\")\n      pmaxLag <- 100\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"ConvergÃªncia\"))\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃ§Ã£oo\",sep=\"\"))\n\n      plot(estTheta2, xlab=\"IteraÃ§Ãµes\",main=\"MÃ©dia e intervalo de erro : Theta 2\",type=\"l\",lwd=\n      + 2,ylim=mean(theta2)+20*c(-esterrTheta2[T2],esterrTheta2[T2]),ylab=\"\")\n      lines(estTheta2 +2*esterrTheta2,col=\"green\",lwd=2)\n      lines(estTheta2 -2*esterrTheta2,col=\"green\",lwd=2)      \n  })\n\n  output$GraficoTempoEspecifico <- renderPlot({\n    modelo <- input$modelo\n    nVertices <- input$selecionaVertices\n\n    dadosResultadoTempo <- dadosResultado[c(3,8,9)]\n    attach(dadosResultadoTempo)\n    dadosResultadoTempo <- dadosResultadoTempo[order(NO_MODELO, NU_VERTICES),]\n    dadosResultadoTempo <- subset(dadosResultadoTempo, (NO_MODELO == modelo | NO_MODELO ==\"Bergm\") \n#                                                         & \n#                                                        (NU_VERTICES == 50 | \n#                                                         NU_VERTICES == 100 | \n#                                                         NU_VERTICES == 200 |\n#                                                         NU_VERTICES == 500 |\n#                                                         NU_VERTICES == 750 |\n#                                                         NU_VERTICES == 1000 )\n                                  )\n\n    par(mfrow=c(1,1))\n    \n    colours <- c(Bergm = \"black\", Delmoral = \"blue\", Beaumont = \"chartreuse\", Lenormand = \"gold\", \n                 Drovandi = \"red\", Marjoram = \"darkmagenta\", Rejeicao = \"cyan\")\n    ggplot(dadosResultadoTempo, aes(x = NU_VERTICES, y = NU_SEG_PROCESSAMENTO, colour = NO_MODELO)) + \n      geom_line(size=1) + \n      ylab(label=\"Tempo em segs\") + \n      xlab(\"VÃƒÂ©rtices\") + \n      theme_bw() +\n      scale_colour_manual(values=colours)  +\n      ggtitle(paste(\"Tempos de Processamento Bergm X \",modelo,\".\",sep=\"\"))\n      \n\n  })\n\n  output$GraficoTempoGeral <- renderPlot({\n    modelo <- input$modelo\n    nVertices <- input$selecionaVertices\n    dadosResultadoTempo <- dadosResultado[c(3,8,9)]\n#     dadosResultadoTempo <- subset(dadosResultadoTempo,  NU_VERTICES == 50 | \n#                                                         NU_VERTICES == 100 | \n#                                                         NU_VERTICES == 200 |\n#                                                         NU_VERTICES == 500 |\n#                                                         NU_VERTICES == 750 |\n#                                                         NU_VERTICES == 1000 )\n    attach(dadosResultadoTempo)\n    dadosResultadoTempo <- dadosResultadoTempo[order(NO_MODELO, NU_VERTICES),]\n    \n    par(mfrow=c(1,1))\n\n    ggplot(dadosResultadoTempo, aes(x = NU_VERTICES, y = NU_SEG_PROCESSAMENTO, colour = NO_MODELO)) + \n      geom_line(size=1) + \n      ylab(label=\"Tempo em segs\") + \n      xlab(\"VÃƒÂ©rtices\") + \n      theme_bw() +\n      scale_colour_manual(values=c(\"chartreuse\", \"black\",\"blue\",\"red\",\"gold\",\"darkmagenta\",\"cyan\")) +\n      ggtitle(paste(\"Tempos de Processamento com TODOS os modelos ABC.\"))\n      \n  })\n\n  output$GraficoTempoGeralSemRejeicao <- renderPlot({\n    modelo <- input$modelo\n    nVertices <- input$selecionaVertices\n    dadosResultadoTempo <- dadosResultado[c(3,8,9)]\n    dadosResultadoTempo <- subset(dadosResultadoTempo,  NO_MODELO != \"Rejeicao\" ) \n#     dadosResultadoTempo <- subset(dadosResultadoTempo,  NU_VERTICES == 50 | \n#                                                         NU_VERTICES == 100 | \n#                                                         NU_VERTICES == 200 |\n#                                                         NU_VERTICES == 500 |\n#                                                         NU_VERTICES == 750 |\n#                                                         NU_VERTICES == 1000 )\n    attach(dadosResultadoTempo)\n    dadosResultadoTempo <- dadosResultadoTempo[order(NO_MODELO, NU_VERTICES),]\n    \n    par(mfrow=c(1,1))\n\n    ggplot(dadosResultadoTempo, aes(x = NU_VERTICES, y = NU_SEG_PROCESSAMENTO, colour = NO_MODELO)) + \n      geom_line(size=1) + \n      ylab(label=\"Tempo em segs\") + \n      xlab(\"VÃƒÂ©rtices\") + \n      theme_bw() +\n      scale_colour_manual(values=c(\"chartreuse\", \"black\",\"blue\",\"red\",\"gold\",\"darkmagenta\",\"cyan\")) +\n      ggtitle(paste(\"Tempos de Processamento Sem ABC - Rejeicao.\"))\n      \n  })\n      # Generate a summary of the data\n  output$summary <- renderPrint({\n    summary(dados)\n  })\n  \n  # Generate an HTML table view of the data\n  output$estatistica50 <- renderDataTable(\n      dadosResultado50,\n    options = list(\n      rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                 ), \n                     searching = FALSE,\n                     paging = FALSE)\n  )\n\n  output$estatistica100 <- renderDataTable(\n      dadosResultado100,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n         ), searching = FALSE,\n                     paging = FALSE)\n  )\n\n  output$estatistica200 <- renderDataTable(\n      dadosResultado200,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica500 <- renderDataTable(\n      dadosResultado500,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica750 <- renderDataTable(\n      dadosResultado750,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n\n  output$estatistica1000 <- renderDataTable(\n      dadosResultado1000,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica1250 <- renderDataTable(\n      dadosResultado1250,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica1500 <- renderDataTable(\n      dadosResultado1500,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica1750 <- renderDataTable(\n      dadosResultado1750,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica2000 <- renderDataTable(\n      dadosResultado2000,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica2250 <- renderDataTable(\n      dadosResultado2250,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[9])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[11])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[15])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"white\");\n        $(\"th:eq(7)\").css(\"color\", \"white\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"white\");\n        $(\"th:eq(8)\").css(\"color\", \"white\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"white\");\n        $(\"th:eq(9)\").css(\"color\", \"white\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"white\");\n        $(\"th:eq(10)\").css(\"color\", \"white\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"white\");\n        $(\"th:eq(11)\").css(\"color\", \"white\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"white\");\n        $(\"th:eq(12)\").css(\"color\", \"white\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n})",
    "created" : 1456414991858.000,
    "dirty" : false,
    "encoding" : "WINDOWS-1252",
    "folds" : "",
    "hash" : "468068541",
    "id" : "14443E8F",
    "lastKnownWriteTime" : 1456415047,
    "last_content_update" : 1456415047713,
    "path" : "C:/MiltonNotebook/Mestrado Estatistica/2014/9-Dissertacao/ImplementacoesABC_Defesa/Visualizacao/ComparaModelosExp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}