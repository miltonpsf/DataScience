aux.iters=pBergm_aux.iters,         # Count; number of auxiliary iterations used for network simulation.
m.prior=pBergm_m.prior,             # Mean of the multivariate Normal prior. By default set to a vector of 0's
sigma.prior=pBergm_sigma.prior,     # Variance/covariance matrix for the multivariate Normal prior. By default set to a diagonal matrix with every diagonal entry equal to 100.
nchains=pBergm_nchains,             # Number of chains of the population MCMC. By default set to twice the
gamma=pBergm_gamma,                 # Valor anterior=0.5.“parallel ADS move factor.” In case of one-dimensional models, the
sigma.epsilon=pBergm_sigma.epsilon  # Valor anterior=diag(0.1,1)variance/covariance matrix for the multivariate Normal proposal or “parallel ADS move parameter”.
)
pBergm_sigma.prior
pBergm_m.prior
diag(100,2)
pBergm_m.prior=c(0,0)             # Mean of the multivariate Normal prior. By default set to a vector of 0's
pBergm_sigma.prior=diag(100,2)  # Variance/covariance matrix for the multivariate Normal prior. By default set to a diagonal matrix with every diagonal entry equal to 100.
pBergm_m.prior
pBergm_sigma.prior
bergmFit <- bergm(bergmModel,
burn.in=pBergm_burn.in,             # Default=100.number of burn-in iterations at the beginning of an MCMC run. If population MCMC is performed, it refers to the number of burn-in iterations for every chain of the population.
main.iters=pBergm_main.iters,       # Count; number of iterations for the MCMC chain(s) excluding burn-in. If population
aux.iters=pBergm_aux.iters,         # Count; number of auxiliary iterations used for network simulation.
m.prior=pBergm_m.prior,             # Mean of the multivariate Normal prior. By default set to a vector of 0's
sigma.prior=pBergm_sigma.prior,     # Variance/covariance matrix for the multivariate Normal prior. By default set to a diagonal matrix with every diagonal entry equal to 100.
nchains=pBergm_nchains,             # Number of chains of the population MCMC. By default set to twice the
gamma=pBergm_gamma,                 # Valor anterior=0.5.“parallel ADS move factor.” In case of one-dimensional models, the
sigma.epsilon=pBergm_sigma.epsilon  # Valor anterior=diag(0.1,1)variance/covariance matrix for the multivariate Normal proposal or “parallel ADS move parameter”.
)
amostraAux <- GeraAmostra_APosteriori_Modelo(pGrafoObs,
pNumGrafosGerar,
pNVertices,
pTheta1,
pProb,
pAlgoritmo,
pModelo,
pModel,
pPrior,
pNb_simul  ,
pSummary_stat_target,
pPrior_test,
pTol,
pN_cluster ,
pUse_seed  ,
pSeed_count ,
pVerbose   ,
pdist_weights,
pProgress_bar,
pDelMoral_alpha,
pDelMoral_tolerance_target,
pDelMoral_M,
pDelMoral_nb_threshold,
pBeaumont_inside_prior,
pBeaumont_tolerance_tab,
pLenormand_inside_prior,
pLenormand_p_acc_min,
pLenormand_alpha,
pDrovandi_tolerance_tab,
pDrovandi_c,
pDrovandi_first_tolerance_level_auto,
pDrovandi_alpha
)
config <- yaml.load_file(configFile)
setwd(config$diretorios$workDir)
source("GrafosFunctions.R")
source("GeraAmostra_APosteriori_ABCSeq_Grafos.R")
source("FuncoesAcessaDadosBD.R")
amostraAux <- GeraAmostra_APosteriori_Modelo(pGrafoObs,
pNumGrafosGerar,
pNVertices,
pTheta1,
pProb,
pAlgoritmo,
pModelo,
pModel,
pPrior,
pNb_simul  ,
pSummary_stat_target,
pPrior_test,
pTol,
pN_cluster ,
pUse_seed  ,
pSeed_count ,
pVerbose   ,
pdist_weights,
pProgress_bar,
pDelMoral_alpha,
pDelMoral_tolerance_target,
pDelMoral_M,
pDelMoral_nb_threshold,
pBeaumont_inside_prior,
pBeaumont_tolerance_tab,
pLenormand_inside_prior,
pLenormand_p_acc_min,
pLenormand_alpha,
pDrovandi_tolerance_tab,
pDrovandi_c,
pDrovandi_first_tolerance_level_auto,
pDrovandi_alpha
)
amostraAux
str(amostraAux)
amostraAux$Theta
head(amostraAux$Theta)
str(amostraAux$Theta)
amostraAux$Theta[,1]
amostraAux$Theta[1,]
amostraAux$Theta[1]
amostraAux$Theta[2]
amostraAux$Theta[,1,1]
amostraAux$Theta[,1,2]
amostraAux$Theta[,1,3]
str(amostraAux$Theta)
amostraAux$Theta[1,,]
str(amostraAux)
amostraAux$Theta[1,,]
amostraAux$Theta[1,1,]
amostraAux$Theta[2,1,]
amostraAux$Theta[,1,]
str(amostraAux$Theta[,1,])
mean(amostraAux$Theta[,1,])
mean(amostraAux$Theta[,2,])
mean(amostraAux$Theta[,2,])
mean(amostraAux$Theta[,2,1])
mean(amostraAux$Theta[,2,2])
mean(amostraAux$Theta[,2,8])
mean(amostraAux$Theta[,2,7])
amostra[[i]] <- list(algoritmosModelos[[i]],amostraAux,mean(amostraAux$Theta[,1,]),mean(amostraAux$Theta[,2,]))
amostra[[i]]
str(amostra[[1]])
amostra[[i]][1]
amostra[[i]][2]
str(amostra[[1]])
algoritmoMetodoAux <- amostra[[i]][1]
algoritmoResultado <- amostra[[i]][2]
algoritmoResultado[[1]]$Theta[,1,]
amostraTheta1 <- algoritmoResultado[[1]]$Theta[,1,]
amostraTheta2 <- algoritmoResultado[[1]]$Theta[,2,]
str(amostraTheta1)
algoritmoResultado[[1]]$Theta[,1,1]
sapply(mean(algoritmoResultado[[1]]$Theta[,1,]))
sapply(algoritmoResultado[[1]]$Theta[,1,],mean)
amostraTheta1 <- sapply(algoritmoResultado[[1]]$Theta[,1,],mean)
str(amostraTheta1)
amostraTheta1 <- sapply(algoritmoResultado[[1]]$Theta[,1,1],mean)
str(amostraTheta1)
amostraTheta1 <- sapply(algoritmoResultado[[1]]$Theta[,1,1:8],mean)
str(amostraTheta1)
amostraTheta1Aux[1] <- sapply(algoritmoResultado[[1]]$Theta[,1,1],mean)
amostraTheta1Aux[2] <- sapply(algoritmoResultado[[1]]$Theta[,1,2],mean)
length(algoritmoResultado[[1]]$Theta[,1,1])
amostraTheta1Aux[1] <- matrix(0,nrow = length(algoritmoResultado[[1]]$Theta[,1,1]), ncol = 1, byrow=TRUE)
amostraTheta1Aux <- matrix(0,nrow = length(algoritmoResultado[[1]]$Theta[,1,1]), ncol = 1, byrow=TRUE)
amostraTheta1Aux
amostraTheta1Aux <- matrix(0,nrow = length(algoritmoResultado[[1]]$Theta[,1,1]), ncol = 8, byrow=TRUE)
amostraTheta1Aux
amostraTheta1Aux[1] <- sapply(algoritmoResultado[[1]]$Theta[,1,1],mean)
sapply(algoritmoResultado[[1]]$Theta[,1,1],mean)
amostraTheta1Aux[1]
amostraTheta1Aux[1,,,,,,,,] <- sapply(algoritmoResultado[[1]]$Theta[,1,1],mean)
amostraTheta1Aux
amostraTheta1Aux[1,] <- sapply(algoritmoResultado[[1]]$Theta[,1,1],mean)
sapply(algoritmoResultado[[1]]$Theta[,1,1],mean)
amostraTheta1Aux <- sapply(algoritmoResultado[[1]]$Theta[,1,1],mean)
str(amostraTheta1Aux)
amostraTheta1Aux[1]
algoritmoResultado[[1]]$Theta[,1,1]
mean(algoritmoResultado[[1]]$Theta[,1,1])
algoritmoResultado[[1]]$Theta[1,1,]
?apply
apply(algoritmoResultado[[1]]$Theta[1,1,],MARGIN = 1, mean)
apply(algoritmoResultado[[1]]$Theta[,1,],MARGIN = 1, mean)
amostraTheta1 <- apply(algoritmoResultado[[1]]$Theta[,1,],mean)
amostraTheta1 <- apply(algoritmoResultado[[1]]$Theta[,1,],MARGIN = 1, mean)
str(amostraTheta1)
amostraTheta2 <- apply(algoritmoResultado[[1]]$Theta[,2,],MARGIN = 1, mean)
amostraTheta2
mean(amostraTheta2)
mean(amostraTheta1)
mean(algoritmoResultado[[1]]$Theta[,1,])
mean(algoritmoResultado[[1]]$Theta[,2,])
maxXParamAmostra <- matrix(0,nrow=1,ncol = 2,byrow=TRUE)
minXParamAmostra <- matrix(0,nrow=1,ncol = 2,byrow=TRUE)
maxXParamAmostra[1] <- max(amostraTheta1)
minXParamAmostra[1] <- min(amostraTheta1)
maxXParam1
if (maxXParam1 < maxXParamAmostra[1]) {
maxXParam1 <- maxXParamAmostra[1]
}
if (minXParam1 > minXParamAmostra[1]) {
minXParam1 <- minXParamAmostra[1]
}
maxXParamAmostra[2] <- max(amostraTheta2)
minXParamAmostra[2] <- min(amostraTheta2)
if (maxXParam2 < maxXParamAmostra[2]) {
maxXParam2 <- maxXParamAmostra[2]
}
if (minXParam2 > minXParamAmostra[2]) {
minXParam2 <- minXParamAmostra[2]
}
amostraTeorica <- rbeta(length(amostraTheta1),alphaTeorica,betaTeorica)
medidaKL1[i]    <- KL.plugin(amostraTeorica,amostraTheta1)
KSTeste1[[i]]   <- ks.test(amostraTeorica,amostraTheta1)
CHTeste1[i]     <- chi2.plugin(amostraTeorica,amostraTheta1)
tamAmostras1[i] <- length(amostraTheta1)
medidaKL2[i]    <- KL.plugin(amostraTeorica,amostraTheta2)
KSTeste2[[i]]   <- ks.test(amostraTeorica,amostraTheta2)
CHTeste2[i]     <- chi2.plugin(amostraTeorica,amostraTheta2)
tamAmostras2[i] <- length(amostraTheta2)
noFile <- RetNomeArq(algoritmosModelos,pNVertices,tipoGerador, pTipoImpressao = "Coda")
pdf(width=12, height=12,file=noFile)
maxLag <- 100
debug(plotResultadosCoda)
plotResultadosCoda(amostra, pNVertices, maxXParam1, minXParam1, maxLag, medidaKL1, KSTeste1, CHTeste1,
maxXParam2, minXParam2, medidaKL2, KSTeste2, CHTeste2)
str(algoritmoResultado)
round(algoritmoResultado[[1]]$computime,2)
plotResultadosCoda <- function (pAmostra, pNVertices, pmaxXParam1, pminXParam1, pmaxLag, pmedidaKL1,  pKSTeste1, pCHTeste1,
pmaxXParam2, pminXParam2, pmedidaKL2,  pKSTeste2, pCHTeste2) {
par(mfrow=c(length(algoritmosModelos),3))
for (j in 1:length(pAmostra)) {
algoritmoMetodoAux <- pAmostra[[j]][1]
algoritmoResultado <- pAmostra[[j]][2]
if (!is.null(algoritmoMetodoAux)) {
if (   algoritmoMetodoAux[[1]][1] == "ABC_sequencial_2thetas" ) {
amostraTheta1 <- algoritmoResultado[[1]]$param[,1]
amostraTheta2 <- algoritmoResultado[[1]]$param[,2]
tempoProcessamento <- round(algoritmoResultado[[1]]$computime,2)
epsilon <- algoritmoResultado[[1]]$epsilon
} else if (algoritmoMetodoAux[[1]][1] == "Bergm_2thetas"){
amostraTheta1 <- apply(algoritmoResultado[[1]]$Theta[,1,],MARGIN = 1, mean)
amostraTheta2 <- apply(algoritmoResultado[[1]]$Theta[,2,],MARGIN = 1, mean)
tempoProcessamento <- round(algoritmoResultado[[1]]$computime,2)
epsilon <- 999
}
denAmostraTheta1 <- density(amostraTheta1)
denAmostraTheta2 <- density(amostraTheta2)
xbeta1 <- seq(pminXParam1,pmaxXParam1,by=0.0001)
ybeta1 <- dbeta(xbeta1,alphaTeorica,betaTeorica)
maxYParamAmostra1 <- max(denAmostraTheta1$y,ybeta1)
minYParamAmostra1 <- min(denAmostraTheta1$y,ybeta1)
if (maxYParam1 < maxYParamAmostra1) {
maxYParam1 <- maxYParamAmostra1
}
if (minYParam1 > minYParamAmostra1) {
minYParam1 <- minYParamAmostra1
}
xbeta2 <- seq(pminXParam2,pmaxXParam2,by=0.0001)
ybeta2 <- dbeta(xbeta2,alphaTeorica,betaTeorica)
maxYParamAmostra2 <- max(denAmostraTheta2$y,ybeta2)
minYParamAmostra2 <- min(denAmostraTheta2$y,ybeta2)
if (maxYParam2 < maxYParamAmostra2) {
maxYParam2 <- maxYParamAmostra2
}
if (minYParam2 > minYParamAmostra2) {
minYParam2 <- minYParamAmostra2
}
media1 <- mean(amostraTheta1)
dp1 <- sd(amostraTheta1)
cv1 <- dp1/media1
amostraMCMC1 <- mcmc(amostraTheta1)
neff1 <- effectiveSize(amostraMCMC1)
tMediaTeorica <- iconv("\n Méd.Teórica : ",from = "UTF-8", to = "")
tMediaTeorica <- "\n Méd.Teórica : "
tMetodo <- iconv("Método : ",from = "UTF-8", to = "")
tMetodo <- "Método : "
tMediaPosteriori <- iconv(" Méd.a posteriori = ",from = "UTF-8", to = "")
tMediaPosteriori <- " Méd.a posteriori = "
tNumVertices <- iconv(" N.Nós = ",from = "UTF-8", to = "")
tNumVertices <- " N.Nós = "
tAutocorrelacao <- iconv("Autocorrelação. \n Taxa de Aceitação : ",from = "UTF-8", to = "")
tAutocorrelacao <- paste("Autocorrelação. \n Taxa de Aceitação : ")
densplot(amostraMCMC1,type="l", lwd = 2,
xlab = "Probabilidade",
ylab = "T=Azul e A=Preta",
xlim = c(pminXParam1,pmaxXParam1),
ylim = c(minYParam1,maxYParam1),
main = paste(tMetodo,
#algoritmoMetodoAux[[1]][1], " - ",
algoritmoMetodoAux[[1]][2], " - ", tipoGerador,
"\n Theta1 = ",thetas[1],
#" , Prob = ",round(CalculaP(pTheta1),3),
tMediaPosteriori, round(as.numeric(amostra[[j]][3]),3),
#"\n HDR = 50%, 95% e 99%",
tMediaTeorica,round(mediaTeorica,3),
tNumVertices, pNVertices,
", Tmp = ", tempoProcessamento,"s"))
lines(xbeta1,ybeta1,lwd=2,col="red")
acceptanceRate1 <- 1 - rejectionRate(amostraMCMC1)
traceplot(amostraMCMC1, ylim=c(pminXParam1,pmaxXParam1), main = paste("KL-Test  : ", round(pmedidaKL1[j],6),"\n KS-Test : Est.", round(pKSTeste1[[j]]$statistic,4),", p-value :",round(pKSTeste1[[j]]$p.value,12),"\n  Chi-Test : ", round(pCHTeste1[[j]],4), ", CV : ",round(cv1,4), sep=""))
autocorr.plot(amostraMCMC1, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(tAutocorrelacao, round(acceptanceRate1,4),"\n neff : ",round(neff1,2),sep=""))
DT_PROCESSAMENTO          <- substr(dataArquivo,1,19)
NO_ALGORITMO    					<- algoritmoMetodoAux[[1]][1]
NO_MODELO     						<- algoritmoMetodoAux[[1]][2]
VL_THETA1     						<- thetas[1]
VL_PROBABILIDADE       		<- 0 #pProb
VL_MEDIA_POSTERIORI       <- as.numeric(amostra[[j]][3])
VL_MEDIA_TEORICA          <- mediaTeorica
NU_VERTICES               <- pNVertices
NU_SEG_PROCESSAMENTO      <- as.numeric(tempoProcessamento)
TX_ACEITACAO              <- as.numeric(acceptanceRate1)
KL_TEST_EST               <- as.numeric(pmedidaKL1[j])
KS_TEST_EST               <- as.numeric(pKSTeste1[[j]]$statistic)
KS_TEST_PVALUE            <- as.numeric(pKSTeste1[[j]]$p.value)
CHISQ_TEST_EST            <- as.numeric(pCHTeste1[[j]])
NEFF                      <- as.numeric(neff1)
CV                        <- as.numeric(cv1)
ALPHA_TEORICA             <- as.numeric(alphaTeorica)
BETA_TEORICA              <- as.numeric(betaTeorica)
TIPO_PROC                 <- tipoProcessamento
conexao  <- RetornaConexaoBDOracle( config )
comandoInsert <- paste ('INSERT INTO DBDMINFOSAS.TB_DABC_RESULTADO (DT_PROCESSAMENTO,NO_ALGORITMO, NO_MODELO, VL_THETA1, VL_PROBABILIDADE, VL_MEDIA_POSTERIORI ,
VL_MEDIA_TEORICA,NU_VERTICES, NU_SEG_PROCESSAMENTO, TX_ACEITACAO , KL_TEST_EST, KS_TEST_EST, KS_TEST_PVALUE, CHISQ_TEST_EST,NEFF,CV,ALPHA_TEORICA,BETA_TEORICA,TIPO_PROC  ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)')
resultBD <- dbSendUpdate (conexao, comandoInsert,DT_PROCESSAMENTO,
NO_ALGORITMO  						,
NO_MODELO     						,
VL_THETA1     						,
VL_PROBABILIDADE       		,
VL_MEDIA_POSTERIORI       ,
VL_MEDIA_TEORICA          ,
NU_VERTICES               ,
NU_SEG_PROCESSAMENTO      ,
TX_ACEITACAO              ,
KL_TEST_EST               ,
KS_TEST_EST               ,
KS_TEST_PVALUE            ,
CHISQ_TEST_EST,
NEFF,
CV,
ALPHA_TEORICA,
BETA_TEORICA,
TIPO_PROC)
#       tabelaBD <- "TB_DABC_RESULTADO"
#       resultInsert <- GravaDadosBD (conexao, tabelaBD,  DT_PROCESSAMENTO,
#                                     NO_ALGORITMO  ,
#                                     NO_MODELO       					,
#                                     VL_THETA1     						,
#                                     VL_PROBABILIDADE       		,
#                                     VL_MEDIA_POSTERIORI       ,
#                                     VL_MEDIA_TEORICA          ,
#                                     NU_VERTICES               ,
#                                     NU_SEG_PROCESSAMENTO      ,
#                                     TX_ACEITACAO              ,
#                                     KL_TEST_EST               ,
#                                     KS_TEST_EST               ,
#                                     KS_TEST_PVALUE            ,
#                                     CHISQ_TEST_EST,
#                                     NEFF,
#                                     CV,
#                                     ALPHA_TEORICA,
#                                     BETA_TEORICA,
#                                     TIPO_PROC)
dbCommit(conexao)
am <- as.data.frame(amostraTheta1)
am$NO_ALGORITMO <- algoritmoMetodoAux[[1]][1]
am$NO_MODELO    <- algoritmoMetodoAux[[1]][2]
am$DT_PROCESSAMENTO <- DT_PROCESSAMENTO
names(am) <- c("VL_AMOSTRA_THETA", "NO_ALGORITMO" , "NO_MODELO" ,  "DT_PROCESSAMENTO")
tabelaBD <- "TB_DABC_AMOSTRA_POSTERIORI"
dbWriteTable(conexao, tabelaBD,am, append=TRUE,row.names=FALSE, overwrite=FALSE,header=TRUE)
FechaConexaoBDOracle( conexao)
}
}
}
debug(plotResultadosCoda)
plotResultadosCoda(amostra, pNVertices, maxXParam1, minXParam1, maxLag, medidaKL1, KSTeste1, CHTeste1,
maxXParam2, minXParam2, medidaKL2, KSTeste2, CHTeste2)
TIPO_PROC
TIPO_PROC <- "Bergm"
NO_ALGORITMO
NO_MODELO
View(amostraTheta1)
conexao  <- RetornaConexaoBDOracle( config )
am <- as.data.frame(amostraTheta2)
am$NO_ALGORITMO <- algoritmoMetodoAux[[1]][1]
am$NO_MODELO    <- algoritmoMetodoAux[[1]][2]
am$DT_PROCESSAMENTO <- DT_PROCESSAMENTO
DT_PROCESSAMENTO          <- substr(dataArquivo,1,19)
am$DT_PROCESSAMENTO <- DT_PROCESSAMENTO
am <- as.data.frame(amostraTheta2)
am$NO_ALGORITMO <- algoritmoMetodoAux[[1]][1]
am$NO_MODELO    <- algoritmoMetodoAux[[1]][2]
am$DT_PROCESSAMENTO <- DT_PROCESSAMENTO
am$THETA <- 2
names(am) <- c("VL_AMOSTRA_THETA", "NO_ALGORITMO" , "NO_MODELO" ,  "DT_PROCESSAMENTO", "THETA")
tabelaBD <- "TB_DABC_AMOSTRA_POSTERIORI"
dbWriteTable(conexao, tabelaBD,am, append=TRUE,row.names=FALSE, overwrite=FALSE,header=TRUE)
FechaConexaoBDOracle( conexao)
exp(-1)
1/1.5
1/1.5^2
a <- rlnorm(10000, -log(4)/2, sqrt(log(4)))
a
mean(a)
var(a)
?ergm.getnerowrk
?ergm.getnetwork
library(ergme)
library(ergm)
?ergm.getnetwork
?MHproposal.ergm
?MHproposal
?"ergm"
?ergm.mcmcslave
?gamma
?dmvnorm
library(mvtnorm)
?dmvnorm
nl <- dmvnorm(x=c(0,0), mean=c(1,1))
nl
l <- dmvnorm(x=c(0,0), mean=c(1,1), log = TRUE)
l
log(nl)
(l <- dmvnorm(x=c(0,0), mean=c(1,1)))
(l <- dmvnorm(x=c(0,0), mean=c(1,1)))
(l <- dmvnorm(x=c(0,0), mean=c(1,1)))
(l <- dmvnorm(x=c(0,0), mean=c(1,1)))
(l <- dmvnorm(x=c(0,0), mean=c(1,1)))
(l <- dmvnorm(x=c(0,rmvnorm(1, sigma = 1)[1,]), mean=c(1,1)))
(l <- dmvnorm(x=c(0,rmvnorm(1, sigma = 1)[1,]), mean=c(1,1)))
rmvnorm(1, sigma = 1)[1,]
rmvnorm(1, sigma = 1)
rmvnorm(1, sigma = 2)
rmvnorm(1, mean = 0, sigma = 2)
sigma.epsilon <- diag(0.5, 1)
sigma.epsilon
rmvnorm(1, mean = 0, sigma = sigma.epsilon)
(nl <- rmvnorm(1, mean = 0, sigma = sigma.epsilon))
log(nl)
(dnl <- dmvnorm(a, mean = 0, sigma = sigma.dpsilon)
rmvnorm(1, mean = 0, sigma = sigma.epsilon))
(dnl <- dmvnorm(a, mean = 0, sigma = sigma.dpsilon))
(dnl <- dmvnorm(nl, mean = 0, sigma = sigma.dpsilon))
(dnl <- dmvnorm(nl, mean = 0, sigma = sigma.epsilon))
(dl <- dmvnorm(nl, mean = 0, sigma = sigma.dpsilon, log=TRUE))
(dl <- dmvnorm(nl, mean = 0, sigma = sigma.epsilon, log=TRUE))
log(0.4182766)
?diff
?ergm.mcmcslave
x <- seq(0, 5, by=0.01)
fy <- dgamma(x, 5, 4)
plot(x, fy, type="l")
x <- seq(0, 5, by=0.01)
propy <- 2*dnorm(x)
plot(x, propy, type="l",ylim=c(0,1))
x <- seq(0, 5, by=0.01)
propy <- 2*dnorm(x)
fy <- dgamma(x, 5, 4)
plot(x, fy, type="l",ylim=c(0,1))
lines(x, propy, lty=2)
legend("topright", lty=1:2, c("alvo","proposta"))
p <- function(x,a,b) x^(a-1)*exp(-b*x) # p(x) a menos de constante de integracao
p(3.2, 5, 4) # calcula p(3.2) usando a=5 e b=4.
nsim <- 10000
met <- numeric(nsim)
aceita <- rep(F,nsim)
last <- 1 # este tambem e' o valor inicial de teta
for (i in 1:nsim){
# gerando candidato-proposta
cand <- abs(rnorm(1)) # default no R e' gerar de N(0,1)
r <- (p(cand,5,4)*dnorm(last)) / (p(last,5,4)*dnorm(cand))
alpha = min(1, r)
if (runif(1) < alpha){
aceita[i] <- T
last <- cand # SE ACEITAR, atualiza valor corrente de teta
}
met[i]<- last  # instancia a i-esima iteracao do algoritmo
}
par(mfrow=c(2,2))
hist(met, main="amostra")
plot(met, type="l"); title("historia")
sqrt(0.0025)
?dlnorm
dcurve(function(x){(1+x)^3},from=0,to=2)
curve(function(x){(1+x)^3},from=0,to=2)
?curve
curve((1+x)^3,from=0,to=2)
curve(1/(1+x)^3,from=0,to=2)
curve(1/(1+x)^3,from=0,to=10)
curve(1/(1+exp(x)^3,from=0,to=10)
curve(1/(1+exp(x))^3,from=0,to=10)
curve(1/(1+exp(x))^3,from=-5,to=5)
curve((2*x)/(1+exp(x))^3,from=-5,to=5)
curve(exp(2*x)/(1+exp(x))^3,from=-5,to=5)
curve(exp(3*x)/(1+exp(x))^3,from=-5,to=5)
curve(exp(0.2*x)/(1+exp(x))^3,from=-5,to=5)
curve(exp(2*x)/(1+exp(x))^3,from=-5,to=5)
curve(exp(2*x)/(1+exp(x))^3,from=-5,to=10)
log(0)
log(0.001)
log(0.0000000000000000000000001)
log(0.000000000000000000000000000000000000000000000000000001)
log(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
log(1)
log(0.99)
log(1^(-100))
1^(-100)
1/100
log(1.0e-10)
log(1.0e-20)
log(1.0e-1000)
log(1.0e-100)
log(1.0e-400)
log(1.0e-300)
log(1.0e-350)
log(1.0e-340)
log(1.0e-330)
log(1.0e-320)
log(1.0e-325)
log(1.0e-324)
log(1.0e-323)
?ABC_Sequencial
library(EasyABC)
?ABC_Sequencial
?ABC_Sequential
ABC_sequential
?ABC_sequential
