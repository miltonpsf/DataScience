{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(shiny)\nlibrary(gdata)\nlibrary(sand)\nlibrary(coda)\nlibrary(reshape)\nlibrary(\"entropy\")\nlibrary(\"yaml\")\nlibrary(\"RJDBC\")\nlibrary(\"ggplot2\")\nlibrary(\"PerformanceAnalytics\")\nlibrary(gridExtra)\nmyDir<-\"~/MiltonNote/DataScience/ImplementacoesABC_Defesa\"\nconfigFile <- paste(myDir, \"config.yml\", sep=\"/\");\nconfig <- yaml.load_file(configFile)\nsetwd(config$diretorios$workDir)\nsource(\"FuncoesAcessaDadosBD.R\")\n\nintervaloConfKL   <- read.csv(\"intervaloConfKL.csv\")\nnames(intervaloConfKL) <- c(\"NU_VERTICES\",\"KL95\",\"KL99\")\nintervaloConfKS   <- read.csv(\"intervaloConfKS.csv\")\nnames(intervaloConfKS) <- c(\"NU_VERTICES\",\"KS95\",\"KS99\")\nintervaloConfChi2 <- read.csv(\"intervaloConfChi2.csv\")\nnames(intervaloConfChi2) <- c(\"NU_VERTICES\",\"CHI95\",\"CHI99\")\n\n#conexao  <- RetornaConexaoBDOracle( config )\n#dadosResultado <- RetornaResultadoAlgoritmos( conexao)\n#lagAlgoritmos <- RetornaLagAlgoritmos( conexao)\n#save(dadosResultado, file=\"dadosResultado.RData\")\n#save(lagAlgoritmos, file=\"lagAlgoritmos.RData\")\nload(\"dadosResultado.RData\")\nload(\"lagAlgoritmos.RData\")\n\ndadosResultadoBergm50  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 50)\ndadosResultadoBergm100  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 100)\ndadosResultadoBergm200  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 200)\ndadosResultadoBergm500  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 500)\ndadosResultadoBergm750  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 750)\ndadosResultadoBergm1000  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 1000)\ndadosResultadoBergm1250  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 1250)\ndadosResultadoBergm1500  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 1500)\ndadosResultadoBergm1750  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 1750)\ndadosResultadoBergm2000  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 2000)\ndadosResultadoBergm2250  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == 2250)\n \n# amostraBergm50 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm50$DT_PROCESSAMENTO)\n# save(amostraBergm50, file=\"amostraBergm50.RData\")\n# amostraBergm100 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm100$DT_PROCESSAMENTO)\n# save(amostraBergm100, file=\"amostraBergm100.RData\")\n# amostraBergm200 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm200$DT_PROCESSAMENTO)\n# save(amostraBergm200, file=\"amostraBergm200.RData\")\n# amostraBergm500 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm500$DT_PROCESSAMENTO)\n# save(amostraBergm500, file=\"amostraBergm500.RData\")\n# amostraBergm750 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm750$DT_PROCESSAMENTO)\n# save(amostraBergm750, file=\"amostraBergm750.RData\")\n# amostraBergm1000 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm1000$DT_PROCESSAMENTO)\n# save(amostraBergm1000, file=\"amostraBergm1000.RData\")\n# amostraBergm1250 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm1250$DT_PROCESSAMENTO)\n# save(amostraBergm1250, file=\"amostraBergm1250.RData\")\n# amostraBergm1500 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm1500$DT_PROCESSAMENTO)\n# save(amostraBergm1500, file=\"amostraBergm1500.RData\")\n# amostraBergm1750 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm1750$DT_PROCESSAMENTO)\n# save(amostraBergm1750, file=\"amostraBergm1750.RData\")\n# amostraBergm2000 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm2000$DT_PROCESSAMENTO)\n# save(amostraBergm2000, file=\"amostraBergm2000.RData\")\n# amostraBergm2250 <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm2250$DT_PROCESSAMENTO)\n# save(amostraBergm2250, file=\"amostraBergm2250.RData\")\n\n# modelo <- \"Delmoral\"\n# nVertices <- 50\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral50  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral50, file=\"dadosResultadoABCDelmoral50.RData\")\n# \n# amostraABCDelmoral50 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral50, file=\"amostraABCDelmoral50.RData\")\n# \n# nVertices <- 100\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral100  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral100, file=\"dadosResultadoABCDelmoral100.RData\")\n# \n# amostraABCDelmoral100 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral100, file=\"amostraABCDelmoral100.RData\")\n# \n# nVertices <- 200\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral200  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral200, file=\"dadosResultadoABCDelmoral200.RData\")\n# \n# amostraABCDelmoral200 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral200, file=\"amostraABCDelmoral200.RData\")\n# \n# nVertices <- 500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral500  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral500, file=\"dadosResultadoABCDelmoral500.RData\")\n# \n# amostraABCDelmoral500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral500, file=\"amostraABCDelmoral500.RData\")\n# \n# nVertices <- 750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral750  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral750, file=\"dadosResultadoABCDelmoral750.RData\")\n# \n# amostraABCDelmoral750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral750, file=\"amostraABCDelmoral750.RData\")\n# \n# nVertices <- 1000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral1000  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral1000, file=\"dadosResultadoABCDelmoral1000.RData\")\n# \n# amostraABCDelmoral1000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral1000, file=\"amostraABCDelmoral1000.RData\")\n# \n# nVertices <- 1250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral1250  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral1250, file=\"dadosResultadoABCDelmoral1250.RData\")\n# \n# amostraABCDelmoral1250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral1250, file=\"amostraABCDelmoral1250.RData\")\n# \n# nVertices <- 1500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral1500  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral1500, file=\"dadosResultadoABCDelmoral1500.RData\")\n# \n# amostraABCDelmoral1500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral1500, file=\"amostraABCDelmoral1500.RData\")\n# \n# nVertices <- 1750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral1750  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral1750, file=\"dadosResultadoABCDelmoral1750.RData\")\n# \n# amostraABCDelmoral1750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral1750, file=\"amostraABCDelmoral1750.RData\")\n# \n# nVertices <- 2000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral2000  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral2000, file=\"dadosResultadoABCDelmoral2000.RData\")\n# \n# amostraABCDelmoral2000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral2000, file=\"amostraABCDelmoral2000.RData\")\n# \n# nVertices <- 2250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDelmoral2250  <- dadosResultadoABC\n# save(dadosResultadoABCDelmoral2250, file=\"dadosResultadoABCDelmoral2250.RData\")\n# \n# amostraABCDelmoral2250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDelmoral2250, file=\"amostraABCDelmoral2250.RData\")\n\n# modelo <- \"Beaumont\"\n# nVertices <- 50\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont50  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont50, file=\"dadosResultadoABCBeaumont50.RData\")\n# \n# amostraABCBeaumont50 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont50, file=\"amostraABCBeaumont50.RData\")\n# \n# nVertices <- 100\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont100  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont100, file=\"dadosResultadoABCBeaumont100.RData\")\n# \n# amostraABCBeaumont100 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont100, file=\"amostraABCBeaumont100.RData\")\n# \n# nVertices <- 200\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont200  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont200, file=\"dadosResultadoABCBeaumont200.RData\")\n# \n# amostraABCBeaumont200 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont200, file=\"amostraABCBeaumont200.RData\")\n# \n# \n# nVertices <- 500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont500  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont500, file=\"dadosResultadoABCBeaumont500.RData\")\n# \n# amostraABCBeaumont500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont500, file=\"amostraABCBeaumont500.RData\")\n# \n# \n# nVertices <- 750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont750  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont750, file=\"dadosResultadoABCBeaumont750.RData\")\n# \n# amostraABCBeaumont750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont750, file=\"amostraABCBeaumont750.RData\")\n# \n# nVertices <- 1000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont1000  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont1000, file=\"dadosResultadoABCBeaumont1000.RData\")\n# \n# amostraABCBeaumont1000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont1000, file=\"amostraABCBeaumont1000.RData\")\n# \n# nVertices <- 1250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont1250  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont1250, file=\"dadosResultadoABCBeaumont1250.RData\")\n# \n# amostraABCBeaumont1250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont1250, file=\"amostraABCBeaumont1250.RData\")\n# \n# nVertices <- 1500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont1500  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont1500, file=\"dadosResultadoABCBeaumont1500.RData\")\n# \n# amostraABCBeaumont1500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont1500, file=\"amostraABCBeaumont1500.RData\")\n# \n# nVertices <- 1750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont1750  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont1750, file=\"dadosResultadoABCBeaumont1750.RData\")\n# \n# amostraABCBeaumont1750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont1750, file=\"amostraABCBeaumont1750.RData\")\n# \n# nVertices <- 2000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont2000  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont2000, file=\"dadosResultadoABCBeaumont2000.RData\")\n# \n# amostraABCBeaumont2000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont2000, file=\"amostraABCBeaumont2000.RData\")\n# \n# nVertices <- 2250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCBeaumont2250  <- dadosResultadoABC\n# save(dadosResultadoABCBeaumont2250, file=\"dadosResultadoABCBeaumont2250.RData\")\n# \n# amostraABCBeaumont2250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCBeaumont2250, file=\"amostraABCBeaumont2250.RData\")\n# \n# \n# modelo <- \"Lenormand\"\n# nVertices <- 50\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand50  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand50, file=\"dadosResultadoABCLenormand50.RData\")\n# \n# amostraABCLenormand50 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand50, file=\"amostraABCLenormand50.RData\")\n# \n# nVertices <- 100\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand100  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand100, file=\"dadosResultadoABCLenormand100.RData\")\n# \n# amostraABCLenormand100 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand100, file=\"amostraABCLenormand100.RData\")\n# \n# nVertices <- 200\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand200  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand200, file=\"dadosResultadoABCLenormand200.RData\")\n# \n# amostraABCLenormand200 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand200, file=\"amostraABCLenormand200.RData\")\n# \n# nVertices <- 500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand500  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand500, file=\"dadosResultadoABCLenormand500.RData\")\n# \n# amostraABCLenormand500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand500, file=\"amostraABCLenormand500.RData\")\n# \n# nVertices <- 750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand750  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand750, file=\"dadosResultadoABCLenormand750.RData\")\n# \n# amostraABCLenormand750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand750, file=\"amostraABCLenormand750.RData\")\n# \n# nVertices <- 1000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand1000  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand1000, file=\"dadosResultadoABCLenormand1000.RData\")\n# \n# amostraABCLenormand1000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand1000, file=\"amostraABCLenormand1000.RData\")\n# \n# nVertices <- 1250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand1250  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand1250, file=\"dadosResultadoABCLenormand1250.RData\")\n# \n# amostraABCLenormand1250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand1250, file=\"amostraABCLenormand1250.RData\")\n# \n# nVertices <- 1500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand1500  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand1500, file=\"dadosResultadoABCLenormand1500.RData\")\n# \n# amostraABCLenormand1500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand1500, file=\"amostraABCLenormand1500.RData\")\n# \n# nVertices <- 1750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand1750  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand1750, file=\"dadosResultadoABCLenormand1750.RData\")\n# \n# amostraABCLenormand1750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand1750, file=\"amostraABCLenormand1750.RData\")\n# \n# nVertices <- 2000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand2000  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand2000, file=\"dadosResultadoABCLenormand2000.RData\")\n# \n# amostraABCLenormand2000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand2000, file=\"amostraABCLenormand2000.RData\")\n# \n# nVertices <- 2250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCLenormand2250  <- dadosResultadoABC\n# save(dadosResultadoABCLenormand2250, file=\"dadosResultadoABCLenormand2250.RData\")\n# \n# amostraABCLenormand2250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCLenormand2250, file=\"amostraABCLenormand2250.RData\")\n# \n# modelo <- \"Drovandi\"\n# nVertices <- 50\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi50  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi50, file=\"dadosResultadoABCDrovandi50.RData\")\n# \n# amostraABCDrovandi50 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi50, file=\"amostraABCDrovandi50.RData\")\n# \n# nVertices <- 100\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi100  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi100, file=\"dadosResultadoABCDrovandi100.RData\")\n# \n# amostraABCDrovandi100 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi100, file=\"amostraABCDrovandi100.RData\")\n# \n# nVertices <- 200\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi200  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi200, file=\"dadosResultadoABCDrovandi200.RData\")\n# \n# amostraABCDrovandi200 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi200, file=\"amostraABCDrovandi200.RData\")\n# \n# nVertices <- 500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi500  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi500, file=\"dadosResultadoABCDrovandi500.RData\")\n# \n# amostraABCDrovandi500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi500, file=\"amostraABCDrovandi500.RData\")\n# \n# nVertices <- 750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi750  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi750, file=\"dadosResultadoABCDrovandi750.RData\")\n# \n# amostraABCDrovandi750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi750, file=\"amostraABCDrovandi750.RData\")\n# \n# nVertices <- 1000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi1000  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi1000, file=\"dadosResultadoABCDrovandi1000.RData\")\n# \n# amostraABCDrovandi1000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi1000, file=\"amostraABCDrovandi1000.RData\")\n# \n# nVertices <- 1250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi1250  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi1250, file=\"dadosResultadoABCDrovandi1250.RData\")\n# \n# amostraABCDrovandi1250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi1250, file=\"amostraABCDrovandi1250.RData\")\n# \n# nVertices <- 1500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi1500  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi1500, file=\"dadosResultadoABCDrovandi1500.RData\")\n# \n# amostraABCDrovandi1500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi1500, file=\"amostraABCDrovandi1500.RData\")\n# \n# nVertices <- 1750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi1750  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi1750, file=\"dadosResultadoABCDrovandi1750.RData\")\n# \n# amostraABCDrovandi1750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi1750, file=\"amostraABCDrovandi1750.RData\")\n# \n# nVertices <- 2000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi2000  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi2000, file=\"dadosResultadoABCDrovandi2000.RData\")\n# \n# amostraABCDrovandi2000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi2000, file=\"amostraABCDrovandi2000.RData\")\n# \n# nVertices <- 2250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCDrovandi2250  <- dadosResultadoABC\n# save(dadosResultadoABCDrovandi2250, file=\"dadosResultadoABCDrovandi2250.RData\")\n# \n# amostraABCDrovandi2250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCDrovandi2250, file=\"amostraABCDrovandi2250.RData\")\n# \n# modelo <- \"Rejeicao\"\n# nVertices <- 50\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCRejeicao50  <- dadosResultadoABC\n# save(dadosResultadoABCRejeicao50, file=\"dadosResultadoABCRejeicao50.RData\")\n# \n# amostraABCRejeicao50 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCRejeicao50, file=\"amostraABCRejeicao50.RData\")\n# \n# nVertices <- 100\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCRejeicao100  <- dadosResultadoABC\n# save(dadosResultadoABCRejeicao100, file=\"dadosResultadoABCRejeicao100.RData\")\n# \n# amostraABCRejeicao100 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCRejeicao100, file=\"amostraABCRejeicao100.RData\")\n# \n# nVertices <- 200\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCRejeicao200  <- dadosResultadoABC\n# save(dadosResultadoABCRejeicao200, file=\"dadosResultadoABCRejeicao200.RData\")\n# \n# amostraABCRejeicao200 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCRejeicao200, file=\"amostraABCRejeicao200.RData\")\n# \n# nVertices <- 500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCRejeicao500  <- dadosResultadoABC\n# save(dadosResultadoABCRejeicao500, file=\"dadosResultadoABCRejeicao500.RData\")\n# \n# amostraABCRejeicao500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCRejeicao500, file=\"amostraABCRejeicao500.RData\")\n# \n# nVertices <- 750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCRejeicao750  <- dadosResultadoABC\n# save(dadosResultadoABCRejeicao750, file=\"dadosResultadoABCRejeicao750.RData\")\n# \n# amostraABCRejeicao750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCRejeicao750, file=\"amostraABCRejeicao750.RData\")\n# \n# nVertices <- 1000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCRejeicao1000  <- dadosResultadoABC\n# save(dadosResultadoABCRejeicao1000, file=\"dadosResultadoABCRejeicao1000.RData\")\n# \n# amostraABCRejeicao1000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCRejeicao1000, file=\"amostraABCRejeicao1000.RData\")\n# \n# nVertices <- 1250\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCRejeicao1250  <- dadosResultadoABC\n# save(dadosResultadoABCRejeicao1250, file=\"dadosResultadoABCRejeicao1250.RData\")\n# \n# amostraABCRejeicao1250 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCRejeicao1250, file=\"amostraABCRejeicao1250.RData\")\n# \n# modelo <- \"Marjoram\"\n# nVertices <- 50\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCMarjoram50  <- dadosResultadoABC\n# save(dadosResultadoABCMarjoram50, file=\"dadosResultadoABCMarjoram50.RData\")\n# \n# amostraABCMarjoram50 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCMarjoram50, file=\"amostraABCMarjoram50.RData\")\n# \n# nVertices <- 100\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCMarjoram100  <- dadosResultadoABC\n# save(dadosResultadoABCMarjoram100, file=\"dadosResultadoABCMarjoram100.RData\")\n# \n# amostraABCMarjoram100 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCMarjoram100, file=\"amostraABCMarjoram100.RData\")\n# \n# nVertices <- 200\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCMarjoram200  <- dadosResultadoABC\n# save(dadosResultadoABCMarjoram200, file=\"dadosResultadoABCMarjoram200.RData\")\n# \n# amostraABCMarjoram200 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCMarjoram200, file=\"amostraABCMarjoram200.RData\")\n# \n# nVertices <- 500\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCMarjoram500  <- dadosResultadoABC\n# save(dadosResultadoABCMarjoram500, file=\"dadosResultadoABCMarjoram500.RData\")\n# \n# amostraABCMarjoram500 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCMarjoram500, file=\"amostraABCMarjoram500.RData\")\n# \n# nVertices <- 750\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCMarjoram750  <- dadosResultadoABC\n# save(dadosResultadoABCMarjoram750, file=\"dadosResultadoABCMarjoram750.RData\")\n# \n# amostraABCMarjoram750 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCMarjoram750, file=\"amostraABCMarjoram750.RData\")\n# \n# nVertices <- 1000\n# dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n# dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n# dadosResultadoABCMarjoram1000  <- dadosResultadoABC\n# save(dadosResultadoABCMarjoram1000, file=\"dadosResultadoABCMarjoram1000.RData\")\n# \n# amostraABCMarjoram1000 <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n# save(amostraABCMarjoram1000, file=\"amostraABCMarjoram1000.RData\")\n\n#write.csv(dadosResultado,\"dadosResultado.csv\")\n\nretornaDadosResutadoPorV <- function (dadosResultado, pNumVertice, pIntervaloConfKL, pIntervaloConfKS, pIntervaloConfChi2) {\n  dadosResultadoPorV <- subset(dadosResultado, NU_VERTICES == pNumVertice)\n#  dadosResultadoPorV  <- dadosResultadoPorV[,-c(1,2,4,5,7,9,10,16,17,18)]\n  dadosResultadoPorV  <- dadosResultadoPorV[,-c(1,2,4,5,7,9,10,14,16,17,18)]\n#  names(dadosResultadoPorV)  <- c(\"Modelo\",\"Media posteriori\",\"Vertice\",\"KL\",\"KS\",\"KS-pvalue\",\"ChiQ\",\"ESS\")\n  names(dadosResultadoPorV)  <- c(\"Modelo\",\"Media posteriori\",\"Vertice\",\"KL\",\"KS\",\"KS-pvalue\",\"ESS\")\n#  dadosResultadoPorV <- dadosResultadoPorV[c(\"Vertice\",\"Modelo\",\"Media posteriori\",\"KL\",\"KS\",\"KS-pvalue\",\"ChiQ\",\"ESS\")]\n  dadosResultadoPorV <- dadosResultadoPorV[c(\"Vertice\",\"Modelo\",\"Media posteriori\",\"KL\",\"KS\",\"KS-pvalue\",\"ESS\")]\n  intervaloConfKLPorV <- subset(pIntervaloConfKL, NU_VERTICES == pNumVertice)   \n  intervaloConfKSPorV <- subset(pIntervaloConfKS, NU_VERTICES == pNumVertice)   \n  intervaloConfChiPorV <- subset(pIntervaloConfChi2, NU_VERTICES == pNumVertice)   \n  intervaloConfKLPorV <- intervaloConfKLPorV[,-1]\n  intervaloConfKSPorV <- intervaloConfKSPorV[,-1]\n#  intervaloConfChiPorV <- intervaloConfChiPorV[,-1]\n  intervaloConfPValuePorV <- as.data.frame(t(c(0.1,0.05)))\n  names(intervaloConfPValuePorV) <- c(\"PV10\",\"PV05\")\n#  dadosResultadoPorV <- cbind(dadosResultadoPorV,intervaloConfKLPorV,intervaloConfKSPorV,intervaloConfChiPorV,intervaloConfPValuePorV)\n  dadosResultadoPorV <- cbind(dadosResultadoPorV,intervaloConfKLPorV,intervaloConfKSPorV,intervaloConfPValuePorV)\n  attach(dadosResultadoPorV)\n  dadosResultadoPorV <- dadosResultadoPorV[order(Modelo),]\n  return(dadosResultadoPorV)\n}\ndadosResultado50   <- retornaDadosResutadoPorV(dadosResultado,50,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado100  <- retornaDadosResutadoPorV(dadosResultado,100,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado200  <- retornaDadosResutadoPorV(dadosResultado,200,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado500  <- retornaDadosResutadoPorV(dadosResultado,500,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado750  <- retornaDadosResutadoPorV(dadosResultado,750,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado1000 <- retornaDadosResutadoPorV(dadosResultado,1000,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado1250 <- retornaDadosResutadoPorV(dadosResultado,1250,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado1500 <- retornaDadosResutadoPorV(dadosResultado,1500,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado1750 <- retornaDadosResutadoPorV(dadosResultado,1750,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado2000 <- retornaDadosResutadoPorV(dadosResultado,2000,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\ndadosResultado2250 <- retornaDadosResutadoPorV(dadosResultado,2250,intervaloConfKL, intervaloConfKS, intervaloConfChi2)\n\n# Define server logic for random distribution application\nshinyServer(function(input, output, session) {\n  \n  # Reactive expression to generate the requested distribution.\n  # This is called whenever the inputs change. The output\n  # functions defined below then all use the value computed from\n  # this expression\n  data <- reactive({\n    modelo <- switch(input$modelo,\n                   Delmoral = Delmoral,\n                   Beaumont = Beaumont,\n                   Lenormand = Lenormand,\n                   Drovandi = Drovandi,\n                   Rejeicao = Rejeicao,\n                   Marjoram = Marjoram\n                   )\n    \n    nVertices <- switch(input$selecionaVertices)\n    \n  })\n  \n  # Generate a plot of the data. Also uses the inputs to build\n  # the plot label. Note that the dependencies on both the inputs\n  # and the data reactive expression are both tracked, and\n  # all expressions are called in the sequence implied by the\n  # dependency graph\n  output$BergmG <- renderPlot({\n    \n    modelo <- input$modelo\n    nVertices <- input$selecionaVertices\n    if (nVertices == 50) {\n      load(\"amostraBergm50.RData\")\n      amostraBergm <- amostraBergm50\n      dadosResultadoBergm <- dadosResultadoBergm50\n    }\n    if (nVertices == 100) {\n      load(\"amostraBergm100.RData\")\n      amostraBergm <- amostraBergm100\n      dadosResultadoBergm <- dadosResultadoBergm100\n    }\n    if (nVertices == 200) {\n      load(\"amostraBergm200.RData\")\n      amostraBergm <- amostraBergm200\n      dadosResultadoBergm <- dadosResultadoBergm200\n    }\n    if (nVertices == 500) {\n      load(\"amostraBergm500.RData\")\n      amostraBergm <- amostraBergm500\n      dadosResultadoBergm <- dadosResultadoBergm500\n    }\n    if (nVertices == 750) {\n      load(\"amostraBergm750.RData\")\n      amostraBergm <- amostraBergm750\n      dadosResultadoBergm <- dadosResultadoBergm750\n    }\n    if (nVertices == 1000) {\n      load(\"amostraBergm1000.RData\")\n      amostraBergm <- amostraBergm1000\n      dadosResultadoBergm <- dadosResultadoBergm1000\n    }\n    if (nVertices == 1250) {\n      load(\"amostraBergm1250.RData\")\n      amostraBergm <- amostraBergm1250\n      dadosResultadoBergm <- dadosResultadoBergm1250\n    }\n    if (nVertices == 1500) {\n      load(\"amostraBergm1500.RData\")\n      amostraBergm <- amostraBergm1500\n      dadosResultadoBergm <- dadosResultadoBergm1500\n    }\n    if (nVertices == 1750) {\n      load(\"amostraBergm1750.RData\")\n      amostraBergm <- amostraBergm1750\n      dadosResultadoBergm <- dadosResultadoBergm1750\n    }\n    if (nVertices == 2000) {\n      load(\"amostraBergm2000.RData\")\n      amostraBergm <- amostraBergm2000\n      dadosResultadoBergm <- dadosResultadoBergm2000\n    }\n    if (nVertices == 2250) {\n      load(\"amostraBergm2250.RData\")\n      amostraBergm <- amostraBergm2250\n      dadosResultadoBergm <- dadosResultadoBergm2250\n    }\n    #dadosResultadoBergm  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == nVertices)\n    #amostraBergm <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm$DT_PROCESSAMENTO)\n    #write.csv(amostraBergm,paste(\"amostraBergm_\",nVertices,\".csv\",sep=\"\"))\n    \n    par(mfrow=c(1,4))\n    pminXParam <- min(amostraBergm$VL_AMOSTRA_THETA)\n    pmaxXParam <- max(amostraBergm$VL_AMOSTRA_THETA)\n\n    lagAlgoritmos <- subset(lagAlgoritmos, NO_MODELO ==\"Bergm\" & NU_VERTICES == nVertices)\n    lag <- lagAlgoritmos$LAG\n    T <- NROW(amostraBergm)\n    theta1 <- amostraBergm$VL_AMOSTRA_THETA\n    ind <- seq(lag,T,by=lag)\n    theta1 <- theta1[ind]\n    T <- length(ind)\n    estTheta1 =cumsum(theta1)/(1:T)\n    esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T)\n\n    amostraMCMC <- mcmc(theta1)\n\n    alphaTeorica <- dadosResultadoBergm$ALPHA_TEORICA\n    betaTeorica <-  dadosResultadoBergm$BETA_TEORICA \n    denAmostraTheta <- density(amostraBergm$VL_AMOSTRA_THETA)\n    maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n                            dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n    densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Probabilidade\",\n                                      ylab=\"T=Azul e A=Preta\",\n                                      #xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(\"Theta1 = \",dadosResultadoBergm$VL_THETA1,\n                                      \" , Prob = \",round(as.numeric(dadosResultadoBergm$VL_PROBABILIDADE),3),\n                                      \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoBergm$VL_MEDIA_POSTERIORI),3),\n                                      \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoBergm$VL_MEDIA_TEORICA),3),\n                                      \", Tempo = \", dadosResultadoBergm$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n                                      )\n\n      pmaxLag <- 100\n      curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\")\n      \n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoBergm$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoBergm$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoBergm$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoBergm$CHISQ_TEST_EST,4), sep=\"\"))\n      mediaAPosteriori <- round(as.numeric(dadosResultadoBergm$VL_MEDIA_POSTERIORI),3)\n      ##abline(h=mediaAPosteriori,col=\"red\")\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoBergm$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoBergm$NEFF,sep=\"\"))\n\n      plot(estTheta1, xlab=\"IteraÃƒÂ§ÃƒÂµes\",main=\"MÃƒÂ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n      + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T],esterrTheta1[T]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"gold\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"gold\",lwd=2)      \n      #abline(h=mediaAPosteriori,col=\"red\")\n  })\n\n#   output$BergmI <- renderPlot({\n#     modelo <- input$modelo\n#     nVertices <- input$selecionaVertices\n#     dadosResultadoBergm  <- subset(dadosResultado, NO_MODELO ==\"Bergm\" & NU_VERTICES == nVertices)\n#     amostraBergm <- RetornaAmostraAlgoritmos(conexao, \"Bergm\", dadosResultadoBergm$DT_PROCESSAMENTO)\n# \n#     par(mfrow=c(1,3))\n#     pminXParam <- min(amostraBergm$VL_AMOSTRA_THETA)\n#     pmaxXParam <- max(amostraBergm$VL_AMOSTRA_THETA)\n#     amostraMCMC <- mcmc(amostraBergm$VL_AMOSTRA_THETA)\n#     alphaTeorica <- dadosResultadoBergm$ALPHA_TEORICA\n#     betaTeorica <-  dadosResultadoBergm$BETA_TEORICA \n#     \n#     denAmostraTheta <- density(amostraBergm$VL_AMOSTRA_THETA)\n#     maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n#                             dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n#     densplot(amostraMCMC,type=\"l\", lwd=2,\n#                                       xlab=\"Probabilidade\",\n#                                       ylab=\"T=Azul e A=Preta\",\n#                                       #xlim=c(pminXParam,pmaxXParam),\n#                                       ylim=c(0,maxYParam),\n#                                       main=paste(\"Theta1 = \",dadosResultadoBergm$VL_THETA1,\n#                                       \" , Prob = \",round(as.numeric(dadosResultadoBergm$VL_PROBABILIDADE),3),\n#                                       \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoBergm$VL_MEDIA_POSTERIORI),3),\n#                                       \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoBergm$VL_MEDIA_TEORICA),3),\n#                                       \", Tempo = \", dadosResultadoBergm$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n#                                       )\n#       pmaxLag <- 100\n#       curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\")\n#       traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoBergm$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoBergm$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoBergm$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoBergm$CHISQ_TEST_EST,4), sep=\"\"))\n# #     autocorr.plot(amostraMCMC, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoBergm$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoBergm$NEFF,sep=\"\"))\n#       acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoBergm$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoBergm$NEFF,sep=\"\"))\n#   })\n    \n#   output$ABC <- renderPlot({\n#     \n#     modelo <- input$modelo\n#     nVertices <- input$selecionaVertices\n#     dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n#     dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n#     amostraABC <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n#     write.csv(amostraABC,paste(\"amostraABC_\",nVertices,\"_\",modelo,\".csv\",sep=\"\"))\n# \n#     par(mfrow=c(1,4))\n#     pminXParam <- min(amostraABC$VL_AMOSTRA_THETA)\n#     pmaxXParam <- max(amostraABC$VL_AMOSTRA_THETA)\n#     amostraMCMC <- mcmc(amostraABC$VL_AMOSTRA_THETA)\n#     alphaTeorica <- dadosResultadoABC$ALPHA_TEORICA\n#     betaTeorica <-  dadosResultadoABC$BETA_TEORICA \n# \n#     denAmostraTheta <- density(amostraABC$VL_AMOSTRA_THETA)\n#     maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n#                             dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n#     densplot(amostraMCMC,type=\"l\", lwd=2,\n#                                       xlab=\"Probabilidade\",\n#                                       ylab=\"T=Azul e A=Preta\",\n#                                       xlim=c(pminXParam,pmaxXParam),\n#                                       ylim=c(0,maxYParam),\n#                                       main=paste(modelo, \n#                                       \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3),\n#                                       \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoABC$VL_MEDIA_TEORICA),3),\n#                                       \", Tempo = \", dadosResultadoABC$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n#                                       )\n#       pmaxLag <- 100\n#       curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\")\n#       traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoABC$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoABC$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoABC$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoABC$CHISQ_TEST_EST,4), sep=\"\"))\n# #      autocorr.plot(amostraMCMC, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n#       acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n#       lagAlgoritmos <- subset(lagAlgoritmos, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n#       lag <- lagAlgoritmos$LAG\n#       T <- NROW(amostraABC)\n#       theta1 <- amostraABC$VL_AMOSTRA_THETA\n#       estTheta1 =cumsum(amostraABC$VL_AMOSTRA_THETA)/(1:T)\n#       esterrTheta1=sqrt(cumsum((amostraABC$VL_AMOSTRA_THETA-estTheta1)^2))/(1:T)\n#       plot(estTheta1, xlab=\"IteraÃƒÂ§ÃƒÂµes\",main=\"MÃƒÂ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n#       + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T],esterrTheta1[T]),ylab=\"\")\n#       lines(estTheta1 +2*esterrTheta1,col=\"gold\",lwd=2)\n#       lines(estTheta1 -2*esterrTheta1,col=\"gold\",lwd=2)      \n#   })\n\n  output$Delmoral <- renderPlot({\n    modelos <- input$modelos\n    modelo <- \"Delmoral\"\n    nVertices <- input$selecionaVertices\n#     dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n#     dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n#     amostraABC <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n#     write.csv(amostraABC,paste(\"amostraABC_\",nVertices,\"_\",modelo,\".csv\",sep=\"\"))\n    \n    if (nVertices == 50) {\n      load(\"amostraABCDelmoral50.RData\")\n      amostraABC <- amostraABCDelmoral50\n      load(\"dadosResultadoABCDelmoral50.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral50\n    }\n    if (nVertices == 100) {\n      load(\"amostraABCDelmoral100.RData\")\n      amostraABC <- amostraABCDelmoral100\n      load(\"dadosResultadoABCDelmoral100.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral100\n    }\n    if (nVertices == 200) {\n      load(\"amostraABCDelmoral200.RData\")\n      amostraABC <- amostraABCDelmoral200\n      load(\"dadosResultadoABCDelmoral200.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral200\n    }\n    if (nVertices == 500) {\n      load(\"amostraABCDelmoral500.RData\")\n      amostraABC <- amostraABCDelmoral500\n      load(\"dadosResultadoABCDelmoral500.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral500\n    }\n    if (nVertices == 750) {\n      load(\"amostraABCDelmoral750.RData\")\n      amostraABC <- amostraABCDelmoral750\n      load(\"dadosResultadoABCDelmoral750.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral750\n    }\n    if (nVertices == 1000) {\n      load(\"amostraABCDelmoral1000.RData\")\n      amostraABC <- amostraABCDelmoral1000\n      load(\"dadosResultadoABCDelmoral1000.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral1000\n    }\n    if (nVertices == 1250) {\n      load(\"amostraABCDelmoral1250.RData\")\n      amostraABC <- amostraABCDelmoral1250\n      load(\"dadosResultadoABCDelmoral1250.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral1250\n    }\n    if (nVertices == 1500) {\n      load(\"amostraABCDelmoral1500.RData\")\n      amostraABC <- amostraABCDelmoral1500\n      load(\"dadosResultadoABCDelmoral1500.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral1500\n    }\n    if (nVertices == 1750) {\n      load(\"amostraABCDelmoral1750.RData\")\n      amostraABC <- amostraABCDelmoral1750\n      load(\"dadosResultadoABCDelmoral1750.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral1750\n    }\n    if (nVertices == 2000) {\n      load(\"amostraABCDelmoral2000.RData\")\n      amostraABC <- amostraABCDelmoral2000\n      load(\"dadosResultadoABCDelmoral2000.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral2000\n    }\n    if (nVertices == 2250) {\n      load(\"amostraABCDelmoral2250.RData\")\n      amostraABC <- amostraABCDelmoral2250\n      load(\"dadosResultadoABCDelmoral2250.RData\")\n      dadosResultadoABC <- dadosResultadoABCDelmoral2250\n    }\n\n    par(mfrow=c(1,4))\n    pminXParam <- min(amostraABC$VL_AMOSTRA_THETA)\n    pmaxXParam <- max(amostraABC$VL_AMOSTRA_THETA)\n\n    lagAlgoritmos <- subset(lagAlgoritmos, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n    lag <- lagAlgoritmos$LAG\n    T <- NROW(amostraABC)\n    theta1 <- amostraABC$VL_AMOSTRA_THETA\n    ind <- seq(lag,T,by=lag)\n    theta1 <- theta1[ind]\n    T <- length(ind)\n    estTheta1 =cumsum(theta1)/(1:T)\n    esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T)\n\n    amostraMCMC <- mcmc(theta1)\n    alphaTeorica <- dadosResultadoABC$ALPHA_TEORICA\n    betaTeorica <-  dadosResultadoABC$BETA_TEORICA \n    \n    denAmostraTheta <- density(amostraABC$VL_AMOSTRA_THETA)\n    maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n                            dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n   densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Probabilidade\",\n                                      ylab=\"T=Azul e A=Preta\",\n                                      xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(modelo, \n                                      \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3),\n                                      \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoABC$VL_MEDIA_TEORICA),3),\n                                      \", Tempo = \", dadosResultadoABC$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n                                      )\n      pmaxLag <- 100\n      curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\")\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoABC$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoABC$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoABC$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoABC$CHISQ_TEST_EST,4), sep=\"\"))\n#      autocorr.plot(amostraMCMC, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n      mediaAPosteriori <- round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3)\n      #abline(h=mediaAPosteriori,col=\"red\")\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n      \n      plot(estTheta1, xlab=\"IteraÃƒÂ§ÃƒÂµes\",main=\"MÃƒÂ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n      + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T],esterrTheta1[T]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"gold\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"gold\",lwd=2)      \n      #abline(h=mediaAPosteriori,col=\"red\")\n\n  })\n\n  output$Beaumont <- renderPlot({\n    modelos <- input$modelos\n    modelo <- \"Beaumont\"\n    nVertices <- input$selecionaVertices\n#     dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n#     dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n#     amostraABC <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n#     write.csv(amostraABC,paste(\"amostraABC_\",nVertices,\"_\",modelo,\".csv\",sep=\"\"))\n    \n    if (nVertices == 50) {\n      load(\"amostraABCBeaumont50.RData\")\n      amostraABC <- amostraABCBeaumont50\n      load(\"dadosResultadoABCBeaumont50.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont50\n    }\n    if (nVertices == 100) {\n      load(\"amostraABCBeaumont100.RData\")\n      amostraABC <- amostraABCBeaumont100\n      load(\"dadosResultadoABCBeaumont100.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont100\n    }\n    if (nVertices == 200) {\n      load(\"amostraABCBeaumont200.RData\")\n      amostraABC <- amostraABCBeaumont200\n      load(\"dadosResultadoABCBeaumont200.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont200\n    }\n    if (nVertices == 500) {\n      load(\"amostraABCBeaumont500.RData\")\n      amostraABC <- amostraABCBeaumont500\n      load(\"dadosResultadoABCBeaumont500.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont500\n    }\n    if (nVertices == 750) {\n      load(\"amostraABCBeaumont750.RData\")\n      amostraABC <- amostraABCBeaumont750\n      load(\"dadosResultadoABCBeaumont750.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont750\n    }\n    if (nVertices == 1000) {\n      load(\"amostraABCBeaumont1000.RData\")\n      amostraABC <- amostraABCBeaumont1000\n      load(\"dadosResultadoABCBeaumont1000.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont1000\n    }\n    if (nVertices == 1250) {\n      load(\"amostraABCBeaumont1250.RData\")\n      amostraABC <- amostraABCBeaumont1250\n      load(\"dadosResultadoABCBeaumont1250.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont1250\n    }\n    if (nVertices == 1500) {\n      load(\"amostraABCBeaumont1500.RData\")\n      amostraABC <- amostraABCBeaumont1500\n      load(\"dadosResultadoABCBeaumont1500.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont1500\n    }\n    if (nVertices == 1750) {\n      load(\"amostraABCBeaumont1750.RData\")\n      amostraABC <- amostraABCBeaumont1750\n      load(\"dadosResultadoABCBeaumont1750.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont1750\n    }\n    if (nVertices == 2000) {\n      load(\"amostraABCBeaumont2000.RData\")\n      amostraABC <- amostraABCBeaumont2000\n      load(\"dadosResultadoABCBeaumont2000.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont2000\n    }\n    if (nVertices == 2250) {\n      load(\"amostraABCBeaumont2250.RData\")\n      amostraABC <- amostraABCBeaumont2250\n      load(\"dadosResultadoABCBeaumont2250.RData\")\n      dadosResultadoABC <- dadosResultadoABCBeaumont2250\n    }\n\n    par(mfrow=c(1,4))\n    pminXParam <- min(amostraABC$VL_AMOSTRA_THETA)\n    pmaxXParam <- max(amostraABC$VL_AMOSTRA_THETA)\n\n    lagAlgoritmos <- subset(lagAlgoritmos, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n    lag <- lagAlgoritmos$LAG\n    T <- NROW(amostraABC)\n    theta1 <- amostraABC$VL_AMOSTRA_THETA\n    ind <- seq(lag,T,by=lag)\n    theta1 <- theta1[ind]\n    T <- length(ind)\n    estTheta1 =cumsum(theta1)/(1:T)\n    esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T)\n    \n    amostraMCMC <- mcmc(theta1)\n    alphaTeorica <- dadosResultadoABC$ALPHA_TEORICA\n    betaTeorica <-  dadosResultadoABC$BETA_TEORICA \n\n    denAmostraTheta <- density(amostraABC$VL_AMOSTRA_THETA)\n    maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n                            dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n    if (nVertices >= 1000) {\n      pmaxXParam <- 0.8\n    }\n    densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Probabilidade\",\n                                      ylab=\"T=Azul e A=Preta\",\n                                      xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(modelo, \n                                      \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3),\n                                      \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoABC$VL_MEDIA_TEORICA),3),\n                                      \", Tempo = \", dadosResultadoABC$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n                                      )\n      pmaxLag <- 100\n      curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\",n=50000)\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoABC$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoABC$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoABC$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoABC$CHISQ_TEST_EST,4), sep=\"\"))\n#      autocorr.plot(amostraMCMC, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n      mediaAPosteriori <- round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3)\n      #abline(h=mediaAPosteriori,col=\"red\")\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n\n      plot(estTheta1, xlab=\"IteraÃƒÂ§ÃƒÂµes\",main=\"MÃƒÂ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n      + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T],esterrTheta1[T]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"gold\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"gold\",lwd=2)      \n      #abline(h=mediaAPosteriori,col=\"red\")\n  })\n\n  output$Lenormand <- renderPlot({\n    modelos <- input$modelos\n    modelo <- \"Lenormand\"\n    nVertices <- input$selecionaVertices\n#     dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n#     dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n#     amostraABC <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n#     write.csv(amostraABC,paste(\"amostraABC_\",nVertices,\"_\",modelo,\".csv\",sep=\"\"))\n\n    if (nVertices == 50) {\n      load(\"amostraABCLenormand50.RData\")\n      amostraABC <- amostraABCLenormand50\n      load(\"dadosResultadoABCLenormand50.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand50\n    }\n    if (nVertices == 100) {\n      load(\"amostraABCLenormand100.RData\")\n      amostraABC <- amostraABCLenormand100\n      load(\"dadosResultadoABCLenormand100.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand100\n    }\n    if (nVertices == 200) {\n      load(\"amostraABCLenormand200.RData\")\n      amostraABC <- amostraABCLenormand200\n      load(\"dadosResultadoABCLenormand200.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand200\n    }\n    if (nVertices == 500) {\n      load(\"amostraABCLenormand500.RData\")\n      amostraABC <- amostraABCLenormand500\n      load(\"dadosResultadoABCLenormand500.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand500\n    }\n    if (nVertices == 750) {\n      load(\"amostraABCLenormand750.RData\")\n      amostraABC <- amostraABCLenormand750\n      load(\"dadosResultadoABCLenormand750.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand750\n    }\n    if (nVertices == 1000) {\n      load(\"amostraABCLenormand1000.RData\")\n      amostraABC <- amostraABCLenormand1000\n      load(\"dadosResultadoABCLenormand1000.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand1000\n    }\n    if (nVertices == 1250) {\n      load(\"amostraABCLenormand1250.RData\")\n      amostraABC <- amostraABCLenormand1250\n      load(\"dadosResultadoABCLenormand1250.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand1250\n    }\n    if (nVertices == 1500) {\n      load(\"amostraABCLenormand1500.RData\")\n      amostraABC <- amostraABCLenormand1500\n      load(\"dadosResultadoABCLenormand1500.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand1500\n    }\n    if (nVertices == 1750) {\n      load(\"amostraABCLenormand1750.RData\")\n      amostraABC <- amostraABCLenormand1750\n      load(\"dadosResultadoABCLenormand1750.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand1750\n    }\n    if (nVertices == 2000) {\n      load(\"amostraABCLenormand2000.RData\")\n      amostraABC <- amostraABCLenormand2000\n      load(\"dadosResultadoABCLenormand2000.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand2000\n    }\n    if (nVertices == 2250) {\n      load(\"amostraABCLenormand2250.RData\")\n      amostraABC <- amostraABCLenormand2250\n      load(\"dadosResultadoABCLenormand2250.RData\")\n      dadosResultadoABC <- dadosResultadoABCLenormand2250\n    }\n\n    par(mfrow=c(1,4))\n    pminXParam <- min(amostraABC$VL_AMOSTRA_THETA)\n    pmaxXParam <- max(amostraABC$VL_AMOSTRA_THETA)\n\n    lagAlgoritmos <- subset(lagAlgoritmos, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n    lag <- lagAlgoritmos$LAG\n    T <- NROW(amostraABC)\n    theta1 <- amostraABC$VL_AMOSTRA_THETA\n    ind <- seq(lag,T,by=lag)\n    theta1 <- theta1[ind]\n    T <- length(ind)\n    estTheta1 =cumsum(theta1)/(1:T)\n    esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T)\n\n    amostraMCMC <- mcmc(theta1)\n    alphaTeorica <- dadosResultadoABC$ALPHA_TEORICA\n    betaTeorica <-  dadosResultadoABC$BETA_TEORICA \n\n    denAmostraTheta <- density(amostraABC$VL_AMOSTRA_THETA)\n    maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n                            dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n   densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Probabilidade\",\n                                      ylab=\"T=Azul e A=Preta\",\n                                      xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(modelo, \n                                      \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3),\n                                      \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoABC$VL_MEDIA_TEORICA),3),\n                                      \", Tempo = \", dadosResultadoABC$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n                                      )\n      pmaxLag <- 100\n      curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\")\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoABC$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoABC$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoABC$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoABC$CHISQ_TEST_EST,4), sep=\"\"))\n#      autocorr.plot(amostraMCMC, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n      mediaAPosteriori <- round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3)\n      #abline(h=mediaAPosteriori,col=\"red\")\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n\n      plot(estTheta1, xlab=\"IteraÃƒÂ§ÃƒÂµes\",main=\"MÃƒÂ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n      + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T],esterrTheta1[T]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"gold\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"gold\",lwd=2)      \n      #abline(h=mediaAPosteriori,col=\"red\")\n  })\n  output$Drovandi <- renderPlot({\n    modelos <- input$modelos\n    modelo <- \"Drovandi\"\n    nVertices <- input$selecionaVertices\n#     dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n#     dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n#     amostraABC <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n#     write.csv(amostraABC,paste(\"amostraABC_\",nVertices,\"_\",modelo,\".csv\",sep=\"\"))\n    \n    if (nVertices == 50) {\n      load(\"amostraABCDrovandi50.RData\")\n      amostraABC <- amostraABCDrovandi50\n      load(\"dadosResultadoABCDrovandi50.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi50\n    }\n    if (nVertices == 100) {\n      load(\"amostraABCDrovandi100.RData\")\n      amostraABC <- amostraABCDrovandi100\n      load(\"dadosResultadoABCDrovandi100.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi100\n    }\n    if (nVertices == 200) {\n      load(\"amostraABCDrovandi200.RData\")\n      amostraABC <- amostraABCDrovandi200\n      load(\"dadosResultadoABCDrovandi200.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi200\n    }\n    if (nVertices == 500) {\n      load(\"amostraABCDrovandi500.RData\")\n      amostraABC <- amostraABCDrovandi500\n      load(\"dadosResultadoABCDrovandi500.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi500\n    }\n    if (nVertices == 750) {\n      load(\"amostraABCDrovandi750.RData\")\n      amostraABC <- amostraABCDrovandi750\n      load(\"dadosResultadoABCDrovandi750.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi750\n    }\n    if (nVertices == 1000) {\n      load(\"amostraABCDrovandi1000.RData\")\n      amostraABC <- amostraABCDrovandi1000\n      load(\"dadosResultadoABCDrovandi1000.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi1000\n    }\n    if (nVertices == 1250) {\n      load(\"amostraABCDrovandi1250.RData\")\n      amostraABC <- amostraABCDrovandi1250\n      load(\"dadosResultadoABCDrovandi1250.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi1250\n    }\n    if (nVertices == 1500) {\n      load(\"amostraABCDrovandi1500.RData\")\n      amostraABC <- amostraABCDrovandi1500\n      load(\"dadosResultadoABCDrovandi1500.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi1500\n    }\n    if (nVertices == 1750) {\n      load(\"amostraABCDrovandi1750.RData\")\n      amostraABC <- amostraABCDrovandi1750\n      load(\"dadosResultadoABCDrovandi1750.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi1750\n    }\n    if (nVertices == 2000) {\n      load(\"amostraABCDrovandi2000.RData\")\n      amostraABC <- amostraABCDrovandi2000\n      load(\"dadosResultadoABCDrovandi2000.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi2000\n    }\n    if (nVertices == 2250) {\n      load(\"amostraABCDrovandi2250.RData\")\n      amostraABC <- amostraABCDrovandi2250\n      load(\"dadosResultadoABCDrovandi2250.RData\")\n      dadosResultadoABC <- dadosResultadoABCDrovandi2250\n    }\n    par(mfrow=c(1,4))\n    pminXParam <- min(amostraABC$VL_AMOSTRA_THETA)\n    pmaxXParam <- max(amostraABC$VL_AMOSTRA_THETA)\n\n    lagAlgoritmos <- subset(lagAlgoritmos, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n    lag <- lagAlgoritmos$LAG\n    T <- NROW(amostraABC)\n    theta1 <- amostraABC$VL_AMOSTRA_THETA\n    ind <- seq(lag,T,by=lag)\n    theta1 <- theta1[ind]\n    T <- length(ind)\n    estTheta1 =cumsum(theta1)/(1:T)\n    esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T)\n\n    amostraMCMC <- mcmc(theta1)\n    alphaTeorica <- dadosResultadoABC$ALPHA_TEORICA\n    betaTeorica <-  dadosResultadoABC$BETA_TEORICA \n\n    denAmostraTheta <- density(amostraABC$VL_AMOSTRA_THETA)\n    maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n                            dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n\n    densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Probabilidade\",\n                                      ylab=\"T=Azul e A=Preta\",\n                                      xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(modelo, \n                                      \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3),\n                                      \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoABC$VL_MEDIA_TEORICA),3),\n                                      \", Tempo = \", dadosResultadoABC$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n                                      )\n      pmaxLag <- 100\n      curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\")\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoABC$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoABC$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoABC$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoABC$CHISQ_TEST_EST,4), sep=\"\"))\n#      autocorr.plot(amostraMCMC, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n      mediaAPosteriori <- round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3)\n      #abline(h=mediaAPosteriori,col=\"red\")\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n\n      plot(estTheta1, xlab=\"IteraÃƒÂ§ÃƒÂµes\",main=\"MÃƒÂ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n      + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T],esterrTheta1[T]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"gold\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"gold\",lwd=2)      \n      #abline(h=mediaAPosteriori,col=\"red\")\n  })\n  output$Rejeicao <- renderPlot({\n    modelos <- input$modelos\n    modelo <- \"Rejeicao\"\n    nVertices <- input$selecionaVertices\n    nV <- as.numeric(nVertices)\n#     dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n#     dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n#     if (NROW(dadosResultadoABC) != 0) {\n    if (nV < 1500) {  \n#       amostraABC <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n#       write.csv(amostraABC,paste(\"amostraABC_\",nVertices,\"_\",modelo,\".csv\",sep=\"\"))\n      \n      if (nVertices == 50) {\n        load(\"amostraABCRejeicao50.RData\")\n        amostraABC <- amostraABCRejeicao50\n        load(\"dadosResultadoABCRejeicao50.RData\")\n        dadosResultadoABC <- dadosResultadoABCRejeicao50\n      }\n      if (nVertices == 100) {\n        load(\"amostraABCRejeicao100.RData\")\n        amostraABC <- amostraABCRejeicao100\n        load(\"dadosResultadoABCRejeicao100.RData\")\n        dadosResultadoABC <- dadosResultadoABCRejeicao100\n      }\n      if (nVertices == 200) {\n        load(\"amostraABCRejeicao200.RData\")\n        amostraABC <- amostraABCRejeicao200\n        load(\"dadosResultadoABCRejeicao200.RData\")\n        dadosResultadoABC <- dadosResultadoABCRejeicao200\n      }\n      if (nVertices == 500) {\n        load(\"amostraABCRejeicao500.RData\")\n        amostraABC <- amostraABCRejeicao500\n        load(\"dadosResultadoABCRejeicao500.RData\")\n        dadosResultadoABC <- dadosResultadoABCRejeicao500\n      }\n      if (nVertices == 750) {\n        load(\"amostraABCRejeicao750.RData\")\n        amostraABC <- amostraABCRejeicao750\n        load(\"dadosResultadoABCRejeicao750.RData\")\n        dadosResultadoABC <- dadosResultadoABCRejeicao750\n      }\n      if (nVertices == 1000) {\n        load(\"amostraABCRejeicao1000.RData\")\n        amostraABC <- amostraABCRejeicao1000\n        load(\"dadosResultadoABCRejeicao1000.RData\")\n        dadosResultadoABC <- dadosResultadoABCRejeicao1000\n      }\n      if (nVertices == 1250) {\n        load(\"amostraABCRejeicao1250.RData\")\n        amostraABC <- amostraABCRejeicao1250\n        load(\"dadosResultadoABCRejeicao1250.RData\")\n        dadosResultadoABC <- dadosResultadoABCRejeicao1250\n      }\n      par(mfrow=c(1,4))\n      pminXParam <- min(amostraABC$VL_AMOSTRA_THETA)\n      pmaxXParam <- max(amostraABC$VL_AMOSTRA_THETA)\n\n      lagAlgoritmos <- subset(lagAlgoritmos, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n      lag <- lagAlgoritmos$LAG\n      T <- NROW(amostraABC)\n      theta1 <- amostraABC$VL_AMOSTRA_THETA\n      ind <- seq(lag,T,by=lag)\n      theta1 <- theta1[ind]\n      T <- length(ind)\n      estTheta1 =cumsum(theta1)/(1:T)\n      esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T)\n\n      amostraMCMC <- mcmc(theta1)\n      alphaTeorica <- dadosResultadoABC$ALPHA_TEORICA\n      betaTeorica <-  dadosResultadoABC$BETA_TEORICA \n\n      denAmostraTheta <- density(amostraABC$VL_AMOSTRA_THETA)\n      maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n                            dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n      densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Probabilidade\",\n                                      ylab=\"T=Azul e A=Preta\",\n                                      xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(modelo, \n                                      \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3),\n                                      \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoABC$VL_MEDIA_TEORICA),3),\n                                      \", Tempo = \", dadosResultadoABC$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n                                      )\n      pmaxLag <- 100\n      curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\")\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoABC$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoABC$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoABC$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoABC$CHISQ_TEST_EST,4), sep=\"\"))\n#      autocorr.plot(amostraMCMC, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n      mediaAPosteriori <- round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3)\n      #abline(h=mediaAPosteriori,col=\"red\")\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n\n      plot(estTheta1, xlab=\"IteraÃƒÂ§ÃƒÂµes\",main=\"MÃƒÂ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n      + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T],esterrTheta1[T]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"gold\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"gold\",lwd=2)      \n      #abline(h=mediaAPosteriori,col=\"red\")\n    } else {\n      textplot(paste(\"NÃƒÆ’O FORAM GERADOS DADOS PARA ESSE NÃƒÅ¡MERO DE VÃƒâ€°RTICES :\",nVertices),cex=1,col.main = \"blue\",halign = \"left\",valign=\"top\")\n    }  \n  })\n  output$Marjoram <- renderPlot({\n    modelos <- input$modelos\n    modelo <- \"Marjoram\"\n    nVertices <- input$selecionaVertices\n    nV <- as.numeric(nVertices)\n#     dadosResultadoABC  <- subset(dadosResultado, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n#     dadosResultadoABC  <- subset(dadosResultadoABC, DT_PROCESSAMENTO == max(DT_PROCESSAMENTO))\n#     if (NROW(dadosResultadoABC) != 0) {  \n    if (nV < 1250) {  \n#       amostraABC <- RetornaAmostraAlgoritmos(conexao, modelo, dadosResultadoABC$DT_PROCESSAMENTO)\n#       write.csv(amostraABC,paste(\"amostraABC_\",nVertices,\"_\",modelo,\".csv\",sep=\"\"))\n\n      if (nVertices == 50) {\n        load(\"amostraABCMarjoram50.RData\")\n        amostraABC <- amostraABCMarjoram50\n        load(\"dadosResultadoABCMarjoram50.RData\")\n        dadosResultadoABC <- dadosResultadoABCMarjoram50\n      }\n      if (nVertices == 100) {\n        load(\"amostraABCMarjoram100.RData\")\n        amostraABC <- amostraABCMarjoram100\n        load(\"dadosResultadoABCMarjoram100.RData\")\n        dadosResultadoABC <- dadosResultadoABCMarjoram100\n      }\n      if (nVertices == 200) {\n        load(\"amostraABCMarjoram200.RData\")\n        amostraABC <- amostraABCMarjoram200\n        load(\"dadosResultadoABCMarjoram200.RData\")\n        dadosResultadoABC <- dadosResultadoABCMarjoram200\n      }\n      if (nVertices == 500) {\n        load(\"amostraABCMarjoram500.RData\")\n        amostraABC <- amostraABCMarjoram500\n        load(\"dadosResultadoABCMarjoram500.RData\")\n        dadosResultadoABC <- dadosResultadoABCMarjoram500\n      }\n      if (nVertices == 750) {\n        load(\"amostraABCMarjoram750.RData\")\n        amostraABC <- amostraABCMarjoram750\n        load(\"dadosResultadoABCMarjoram750.RData\")\n        dadosResultadoABC <- dadosResultadoABCMarjoram750\n      }\n      if (nVertices == 1000) {\n        load(\"amostraABCMarjoram1000.RData\")\n        amostraABC <- amostraABCMarjoram1000\n        load(\"dadosResultadoABCMarjoram1000.RData\")\n        dadosResultadoABC <- dadosResultadoABCMarjoram1000\n      }\n\n      par(mfrow=c(1,4))\n      pminXParam <- min(amostraABC$VL_AMOSTRA_THETA)\n      pmaxXParam <- max(amostraABC$VL_AMOSTRA_THETA)\n\n      lagAlgoritmos <- subset(lagAlgoritmos, NO_MODELO ==modelo & NU_VERTICES == nVertices)\n      lag <- lagAlgoritmos$LAG\n      T <- NROW(amostraABC)\n      theta1 <- amostraABC$VL_AMOSTRA_THETA\n      ind <- seq(lag,T,by=lag)\n      theta1 <- theta1[ind]\n      T <- length(ind)\n      estTheta1 =cumsum(theta1)/(1:T)\n      esterrTheta1=sqrt(cumsum((theta1-estTheta1)^2))/(1:T)\n      \n      amostraMCMC <- mcmc(theta1)\n      alphaTeorica <- dadosResultadoABC$ALPHA_TEORICA\n      betaTeorica <-  dadosResultadoABC$BETA_TEORICA \n\n      denAmostraTheta <- density(amostraABC$VL_AMOSTRA_THETA)\n      maxYParam <- ifelse(dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica) > max(denAmostraTheta$y), \n                            dbeta(alphaTeorica/(alphaTeorica+betaTeorica),alphaTeorica,betaTeorica), max(denAmostraTheta$y))\n    \n      densplot(amostraMCMC,type=\"l\", lwd=2,\n                                      xlab=\"Probabilidade\",\n                                      ylab=\"T=Azul e A=Preta\",\n                                      xlim=c(pminXParam,pmaxXParam),\n                                      ylim=c(0,maxYParam),\n                                      main=paste(modelo, \n                                      \"\\n MÃƒÂ©dia a posteriori = \", round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3),\n                                      \"\\n MÃƒÂ©dia TeÃƒÂ³rica : \",round(as.numeric(dadosResultadoABC$VL_MEDIA_TEORICA),3),\n                                      \", Tempo = \", dadosResultadoABC$NU_SEG_PROCESSAMENTO,\" s\",sep=\"\")\n                                      )\n      pmaxLag <- 100\n      curve(dbeta(x,alphaTeorica,betaTeorica),from=pminXParam,to=pmaxXParam,add=TRUE,lwd=2,col=\"red\")\n      traceplot(amostraMCMC, ylim=c(pminXParam,pmaxXParam), main = paste(\"KL  : \", round(dadosResultadoABC$KL_TEST_EST,6),\"\\n KS : \", round(dadosResultadoABC$KS_TEST_EST,4),\", p-value :\",round(dadosResultadoABC$KS_TEST_PVALUE,6),\"\\n  Chi-Q : \", round(dadosResultadoABC$CHISQ_TEST_EST,4), sep=\"\"))\n#      autocorr.plot(amostraMCMC, lag.max= pmaxLag, auto.layout = FALSE, ask = FALSE, main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n      mediaAPosteriori <- round(as.numeric(dadosResultadoABC$VL_MEDIA_POSTERIORI),3)\n      #abline(h=mediaAPosteriori,col=\"red\")\n      acf(amostraMCMC,lag.max= pmaxLag, type=\"correlation\", main = paste(\"AutocorrelaÃƒÂ§ÃƒÂ£o. \\n Taxa de AceitaÃƒÂ§ÃƒÂ£o : \",round(dadosResultadoABC$TX_ACEITACAO,4), \"\\n Tamanho Efetivo : \",dadosResultadoABC$NEFF,sep=\"\"))\n\n      plot(estTheta1, xlab=\"IteraÃƒÂ§ÃƒÂµes\",main=\"MÃƒÂ©dia e intervalo de erro : Theta 1\",type=\"l\",lwd=\n      + 2,ylim=mean(theta1)+20*c(-esterrTheta1[T],esterrTheta1[T]),ylab=\"\")\n      lines(estTheta1 +2*esterrTheta1,col=\"gold\",lwd=2)\n      lines(estTheta1 -2*esterrTheta1,col=\"gold\",lwd=2)      \n      #abline(h=mediaAPosteriori,col=\"red\")\n    } else {\n      textplot(paste(\"NÃƒÆ’O FORAM GERADOS DADOS PARA ESSE NÃƒÅ¡MERO DE VÃƒâ€°RTICES :\",nVertices),cex=1,col.main = \"blue\",halign = \"left\",valign=\"top\")\n    }  \n  })\n\n  output$GraficoTempoEspecifico <- renderPlot({\n    modelo <- input$modelo\n    nVertices <- input$selecionaVertices\n\n    dadosResultadoTempo <- dadosResultado[c(3,8,9)]\n    attach(dadosResultadoTempo)\n    dadosResultadoTempo <- dadosResultadoTempo[order(NO_MODELO, NU_VERTICES),]\n    dadosResultadoTempo <- subset(dadosResultadoTempo, (NO_MODELO == modelo | NO_MODELO ==\"Bergm\") \n#                                                         & \n#                                                        (NU_VERTICES == 50 | \n#                                                         NU_VERTICES == 100 | \n#                                                         NU_VERTICES == 200 |\n#                                                         NU_VERTICES == 500 |\n#                                                         NU_VERTICES == 750 |\n#                                                         NU_VERTICES == 1000 )\n                                  )\n\n    par(mfrow=c(1,1))\n    \n    colours <- c(Bergm = \"black\", Delmoral = \"blue\", Beaumont = \"chartreuse\", Lenormand = \"gold\", \n                 Drovandi = \"red\", Marjoram = \"darkmagenta\", Rejeicao = \"cyan\")\n    ggplot(dadosResultadoTempo, aes(x = NU_VERTICES, y = NU_SEG_PROCESSAMENTO, colour = NO_MODELO)) + \n      geom_line(size=1) + \n      ylab(label=\"Tempo em segs\") + \n      xlab(\"VÃƒÂ©rtices\") + \n      theme_bw() +\n      scale_colour_manual(values=colours)  +\n      ggtitle(paste(\"Tempos de Processamento Bergm X \",modelo,\".\",sep=\"\"))\n      \n\n  })\n\n  output$GraficoTempoGeral <- renderPlot({\n    modelo <- input$modelo\n    nVertices <- input$selecionaVertices\n    dadosResultadoTempo <- dadosResultado[c(3,8,9)]\n#     dadosResultadoTempo <- subset(dadosResultadoTempo,  NU_VERTICES == 50 | \n#                                                         NU_VERTICES == 100 | \n#                                                         NU_VERTICES == 200 |\n#                                                         NU_VERTICES == 500 |\n#                                                         NU_VERTICES == 750 |\n#                                                         NU_VERTICES == 1000 )\n    attach(dadosResultadoTempo)\n    dadosResultadoTempo <- dadosResultadoTempo[order(NO_MODELO, NU_VERTICES),]\n    \n    par(mfrow=c(1,1))\n\n    ggplot(dadosResultadoTempo, aes(x = NU_VERTICES, y = NU_SEG_PROCESSAMENTO, colour = NO_MODELO)) + \n      geom_line(size=1) + \n      ylab(label=\"Tempo em segs\") + \n      xlab(\"VÃƒÂ©rtices\") + \n      theme_bw() +\n      scale_colour_manual(values=c(\"chartreuse\", \"black\",\"blue\",\"red\",\"gold\",\"darkmagenta\",\"cyan\")) +\n      ggtitle(paste(\"Tempos de Processamento com TODOS os modelos ABC.\"))\n      \n  })\n\n  output$GraficoTempoGeralSemRejeicao <- renderPlot({\n    modelo <- input$modelo\n    nVertices <- input$selecionaVertices\n    dadosResultadoTempo <- dadosResultado[c(3,8,9)]\n    dadosResultadoTempo <- subset(dadosResultadoTempo,  NO_MODELO != \"Rejeicao\" ) \n#     dadosResultadoTempo <- subset(dadosResultadoTempo,  NU_VERTICES == 50 | \n#                                                         NU_VERTICES == 100 | \n#                                                         NU_VERTICES == 200 |\n#                                                         NU_VERTICES == 500 |\n#                                                         NU_VERTICES == 750 |\n#                                                         NU_VERTICES == 1000 )\n    attach(dadosResultadoTempo)\n    dadosResultadoTempo <- dadosResultadoTempo[order(NO_MODELO, NU_VERTICES),]\n    \n    par(mfrow=c(1,1))\n\n    ggplot(dadosResultadoTempo, aes(x = NU_VERTICES, y = NU_SEG_PROCESSAMENTO, colour = NO_MODELO)) + \n      geom_line(size=1) + \n      ylab(label=\"Tempo em segs\") + \n      xlab(\"VÃƒÂ©rtices\") + \n      theme_bw() +\n      scale_colour_manual(values=c(\"chartreuse\", \"black\",\"blue\",\"red\",\"gold\",\"darkmagenta\",\"cyan\")) +\n      ggtitle(paste(\"Tempos de Processamento Sem ABC - Rejeicao.\"))\n      \n  })\n      # Generate a summary of the data\n  output$summary <- renderPrint({\n    summary(dados)\n  })\n  \n  # Generate an HTML table view of the data\n  output$estatistica50 <- renderDataTable(\n      dadosResultado50,\n    options = list(\n      rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                 ), \n                     searching = FALSE,\n                     paging = FALSE)\n  )\n\n  output$estatistica100 <- renderDataTable(\n      dadosResultado100,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n         ), searching = FALSE,\n                     paging = FALSE)\n  )\n\n  output$estatistica200 <- renderDataTable(\n      dadosResultado200,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica500 <- renderDataTable(\n      dadosResultado500,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica750 <- renderDataTable(\n      dadosResultado750,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n\n  output$estatistica1000 <- renderDataTable(\n      dadosResultado1000,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        if (parseFloat(data[2]) <= parseFloat(0.70)) {\n            $(\"td:eq(2)\", row).css(\"font-weight\", \"bold\");\n            $(\"td:eq(2)\", row).css(\"color\", \"red\");\n        } \n      // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica1250 <- renderDataTable(\n      dadosResultado1250,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        if (parseFloat(data[2]) <= parseFloat(0.70)) {\n            $(\"td:eq(2)\", row).css(\"font-weight\", \"bold\");\n            $(\"td:eq(2)\", row).css(\"color\", \"red\");\n        } \n      // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica1500 <- renderDataTable(\n      dadosResultado1500,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        if (parseFloat(data[2]) <= parseFloat(0.70)) {\n            $(\"td:eq(2)\", row).css(\"font-weight\", \"bold\");\n            $(\"td:eq(2)\", row).css(\"color\", \"red\");\n        }\n      // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica1750 <- renderDataTable(\n      dadosResultado1750,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        if (parseFloat(data[2]) <= parseFloat(0.70)) {\n            $(\"td:eq(2)\", row).css(\"font-weight\", \"bold\");\n            $(\"td:eq(2)\", row).css(\"color\", \"red\");\n        }\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica2000 <- renderDataTable(\n      dadosResultado2000,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        if (parseFloat(data[2]) <= parseFloat(0.70)) {\n            $(\"td:eq(2)\", row).css(\"font-weight\", \"bold\");\n            $(\"td:eq(2)\", row).css(\"color\", \"red\");\n        }\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n  output$estatistica2250 <- renderDataTable(\n      dadosResultado2250,\n    options = list(rowCallback = I(\n      'function(row, data) {\n        if (parseFloat(data[2]) <= parseFloat(0.70)) {\n            $(\"td:eq(2)\", row).css(\"font-weight\", \"bold\");\n            $(\"td:eq(2)\", row).css(\"color\", \"red\");\n        }\n        // KL\n        if (parseFloat(data[3]) <= parseFloat(data[7])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[3]) <= parseFloat(data[8])) {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(3)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(3)\", row).css(\"color\", \"red\");\n        } \n        // KS\n        if (parseFloat(data[4]) <= parseFloat(data[9])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[4]) <= parseFloat(data[10])) {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(4)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(4)\", row).css(\"color\", \"red\");\n        }\n        // p-value\n        if (parseFloat(data[5]) >= parseFloat(data[11])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"blue\");\n        } else \n        if (parseFloat(data[5]) >= parseFloat(data[12])) {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"black\");\n        } else {\n          $(\"td:eq(5)\", row).css(\"font-weight\", \"bold\");\n          $(\"td:eq(5)\", row).css(\"color\", \"red\");\n        } \n        $(\"td:eq(6)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(6)\", row).css(\"color\", \"black\");\n        $(\"th:eq(6)\").css(\"color\", \"black\");\n\n        $(\"td:eq(7)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(7)\", row).css(\"color\", \"black\");\n        $(\"th:eq(7)\").css(\"color\", \"black\");\n        \n        $(\"td:eq(8)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(8)\", row).css(\"color\", \"black\");\n        $(\"th:eq(8)\").css(\"color\", \"black\");\n\n        $(\"td:eq(9)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(9)\", row).css(\"color\", \"black\");\n        $(\"th:eq(9)\").css(\"color\", \"black\");\n\n        $(\"td:eq(10)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(10)\", row).css(\"color\", \"black\");\n        $(\"th:eq(10)\").css(\"color\", \"black\");\n\n        $(\"td:eq(11)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(11)\", row).css(\"color\", \"black\");\n        $(\"th:eq(11)\").css(\"color\", \"black\");\n\n        $(\"td:eq(12)\", row).css(\"font-weight\", \"normal\");\n        $(\"td:eq(12)\", row).css(\"color\", \"black\");\n        $(\"th:eq(12)\").css(\"color\", \"black\");\n\n      }'\n                  ), searching = FALSE,\n                     paging = FALSE)\n  )\n  \n})",
    "created" : 1466521620578.000,
    "dirty" : false,
    "encoding" : "WINDOWS-1252",
    "folds" : "",
    "hash" : "2360734998",
    "id" : "89FC5929",
    "lastKnownWriteTime" : 1466521529,
    "last_content_update" : 1466521529,
    "path" : "~/MiltonNote/DataScience/ImplementacoesABC_Defesa/Visualizacao/ComparaModelos/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}